// Code generated by protoc-gen-go. DO NOT EDIT.
// source: routing/v1alpha2/route_rule.proto

package istio_routing_v1alpha2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Load balancing policy to use when forwarding traffic. These policies
// directly correlate to [load balancer
// types](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/load_balancing)
// supported by Envoy.
type UpstreamSettings_LBPolicy int32

const (
	// Default load balancing policy is random load balancing.
	UpstreamSettings_DEFAULT UpstreamSettings_LBPolicy = 0
	// Simple round robin policy.
	UpstreamSettings_ROUND_ROBIN UpstreamSettings_LBPolicy = 1
	// The least request load balancer uses an O(1) algorithm which selects
	// two random healthy hosts and picks the host which has fewer active
	// requests.
	UpstreamSettings_LEAST_CONN UpstreamSettings_LBPolicy = 2
	// The random load balancer selects a random healthy host. The random
	// load balancer generally performs better than round robin if no health
	// checking policy is configured.
	UpstreamSettings_RANDOM UpstreamSettings_LBPolicy = 3
)

var UpstreamSettings_LBPolicy_name = map[int32]string{
	0: "DEFAULT",
	1: "ROUND_ROBIN",
	2: "LEAST_CONN",
	3: "RANDOM",
}
var UpstreamSettings_LBPolicy_value = map[string]int32{
	"DEFAULT":     0,
	"ROUND_ROBIN": 1,
	"LEAST_CONN":  2,
	"RANDOM":      3,
}

func (x UpstreamSettings_LBPolicy) String() string {
	return proto.EnumName(UpstreamSettings_LBPolicy_name, int32(x))
}
func (UpstreamSettings_LBPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{14, 0}
}

// ### Glossary & concepts
//
// *Service* a unit of application behavior bound to a unique name in a
// service registry.  Services consist of multiple network *endpoints*
// implemented by workload instances running on pods, containers, VMs etc.
//
// *Service versions* - In a continuous deployment scenario, for a given
// service, there can be distinct subsets of instances running different
// variants of the application binary. These variants are not necessarily
// different API versions. They could be iterative changes to the same
// service, deployed in different environments (prod, staging, dev,
// etc.). Common scenarios where this occurs include A/B testing, canary
// rollouts, etc. The choice of a particular version can be decided based
// on various criterion (headers, url, etc.) and/or by weights assigned to
// each version.  Each service has a default version consisting of all its
// instances.
//
// *Source* - A downstream client calling a service.
//
// *Host* - The address used by a client when attempting to connect to a
// service.
//
// *Access model* - Applications address only the destination service
// (Host) without knowledge of individual service versions. The actual
// choice of the version is determined by the sidecar, enabling the
// application code to decouple itself from the evolution of dependent
// services.
//
//
//
// RouteRule provides a custom routing policy based on the destination
// service and its versions, the source of the traffic as well as
// connection and request metadata.  The rule must provide a set of
// conditions for each protocol (TCP, UDP, HTTP) that the destination
// service exposes on its ports.
//
// The rule applies only to the ports on the destination service for which
// it provides protocol-specific match condition, e.g. if the rule does not
// specify a TCP condition, the rule does not apply to TCP traffic.
//
// For example, the following rule routes all traffic by default to pods of
// reviews service with label "version: v1". In addition, HTTP requests
// containing for /wpcatalog/, /consumercatalog/ url prefixes will be
// rewritten to /api/v2 and send to pods with label version: v2.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: RouteRule
//     metadata:
//       name: my-rule
//     spec:
//       hosts:
//       - reviews
//       http:
//       - match:
//         - uri:
//             prefix: "/wpcatalog"
//         - uri:
//             prefix: "/consumercatalog"
//         rewrite:
//           uri: "/api/v2"
//         route:
//         - destination:
//             name: reviews
//             labels:
//               version: v2
//           weight: 100
//       - route:
//         - destination:
//             name: reviews
//             labels:
//               version: v1
//           weight: 100
//
// A host name can be defined by only one RouteRule.  A single route rule
// can be used to describe traffic properties for multiple HTTP and TCP
// ports.
type RouteRule struct {
	// REQUIRED. The destination address for traffic captured by this routing
	// rule.  Could be a DNS name with wildcard prefix or a CIDR
	// prefix. Depending on the platform, short-names can also be used
	// instead of a FQDN (i.e. has no dots in the name). In such a scenario,
	// the FQDN of the host would be derived based on the underlying
	// platform.
	//
	// For example on Kubernetes, when hosts contains a short name, Istio
	// will interpret the short name based on the namespace of the client
	// where rules are being applied. Thus, when a client in the "default"
	// namespace applies a rule containing a name "reviews, Istio will setup
	// routes to the "reviews.default.svc.cluster.local" service. However, if
	// a different name such as "reviews.sales" is used, it would be treated
	// as a FQDN during virtual host matching.  In Consul, a plain service
	// name would be resolved to the FQDN "reviews.service.consul".
	//
	// Note that the hosts field applies to both HTTP and TCP services. In
	// case of TCP services, the plain service name or an IP address with
	// CIDR prefix can be used.
	Hosts []string `protobuf:"bytes,1,rep,name=hosts" json:"hosts,omitempty"`
	// The names of gateways that should apply these routes. A single route
	// rule could be used for sources inside the mesh as well as one or more
	// gateways. The selection condition imposed by this field is
	// independant of the sourceLabels match condition in HTTP/TCP routes. It
	// is possible to define a route rule that applies to both the gateway
	// and a specific internal workload by specifying gateways as well as the
	// source match condition in HTTP/TCP routes.
	Gateways []string `protobuf:"bytes,2,rep,name=gateways" json:"gateways,omitempty"`
	// A list of routes for HTTP traffic.
	Http []*HTTPRoute `protobuf:"bytes,3,rep,name=http" json:"http,omitempty"`
	// A list of routes for TCP traffic.
	Tcp []*TCPRoute `protobuf:"bytes,4,rep,name=tcp" json:"tcp,omitempty"`
	// Settings controlling various aspects such as load balancing algorithm
	// to use, connection pool sizes, etc.
	UpstreamSettings *UpstreamSettings `protobuf:"bytes,6,opt,name=upstream_settings,json=upstreamSettings" json:"upstream_settings,omitempty"`
}

func (m *RouteRule) Reset()                    { *m = RouteRule{} }
func (m *RouteRule) String() string            { return proto.CompactTextString(m) }
func (*RouteRule) ProtoMessage()               {}
func (*RouteRule) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *RouteRule) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *RouteRule) GetGateways() []string {
	if m != nil {
		return m.Gateways
	}
	return nil
}

func (m *RouteRule) GetHttp() []*HTTPRoute {
	if m != nil {
		return m.Http
	}
	return nil
}

func (m *RouteRule) GetTcp() []*TCPRoute {
	if m != nil {
		return m.Tcp
	}
	return nil
}

func (m *RouteRule) GetUpstreamSettings() *UpstreamSettings {
	if m != nil {
		return m.UpstreamSettings
	}
	return nil
}

// Destination indicates the network addressable service to which the
// request/connection will be sent after processing a routing rule. See
// RouteRule for usage examples.
type Destination struct {
	// REQUIRED: Service name from the service registry. The name can be a
	// short name, a fully qualified domain name or an IP address. If short
	// names are used, the FQDN of the service will be resolved in a platform
	// specific manner.
	//
	// For example in Kubernetes, when a rule with a short name "reviews" in
	// the destination is applied to a client in the "bookinfo" namespace,
	// the final destination is resolved to
	// reviews.bookinfo.svc.cluster.local. If the rule refers to the
	// destination as "reviews.sales", the resolution process first looks for
	// a "reviews" service in the "sales" namespace. In both cases, the
	// sidecar will route to the IP addresses of the pods constituting the
	// service. However, if the lookup fails, "reviews.sales" is treated as
	// an external service, such that the sidecar will dynamically resolve
	// the DNS of the service name and route the request to the IP addresses
	// returned by the DNS.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Labels will be applied to select a subset of instances in the
	// destination, to load balance requests to.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Specifies the port on the destination. Many services only expose a
	// single port or label ports with the protocols they support, in these
	// cases it is not required to explicitly select the port. Note that
	// selection priority is to first match by name and then match by number.
	//
	// Names must comply with DNS label syntax (rfc1035) and therefore cannot
	// collide with numbers. If there are multiple ports on a service with
	// the same protocol the names should be of the form <protocol-name>-<DNS
	// label>.
	Port *PortSelector `protobuf:"bytes,3,opt,name=port" json:"port,omitempty"`
}

func (m *Destination) Reset()                    { *m = Destination{} }
func (m *Destination) String() string            { return proto.CompactTextString(m) }
func (*Destination) ProtoMessage()               {}
func (*Destination) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Destination) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Destination) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Destination) GetPort() *PortSelector {
	if m != nil {
		return m.Port
	}
	return nil
}

// Describes match conditions and actions for routing HTTP/1.1, HTTP2, and
// gRPC traffic. See RouteRule for usage examples.
type HTTPRoute struct {
	// Match conditions to be satisfied for the route rule to be
	// activated. All conditions inside a single match block have AND
	// semantics, while the list of match blocks have OR semantics. The rule
	// is matched if any one of the match blocks succeed.
	Match []*HTTPMatchRequest `protobuf:"bytes,1,rep,name=match" json:"match,omitempty"`
	// A http rule can either redirect or forward (default) traffic.  The
	// forwarding target can be one of several versions of a service (see
	// glossary in beginning of document). Weights associated with the
	// service version determine the proportion of traffic it receives.
	Route []*DestinationWeight `protobuf:"bytes,2,rep,name=route" json:"route,omitempty"`
	// A http rule can either redirect or forward (default) traffic.  If
	// traffic passthrough option is specified in the route rule,
	// route/redirect will be ignored. The redirect primitive can be used to
	// send a HTTP 302 redirect to a different URI or Authority.
	Redirect *HTTPRedirect `protobuf:"bytes,3,opt,name=redirect" json:"redirect,omitempty"`
	// Rewrite HTTP URIs and Authority headers. Rewrite cannot be used with
	// Redirect primitive. Rewrite will be performed before forwarding.
	Rewrite *HTTPRewrite `protobuf:"bytes,4,opt,name=rewrite" json:"rewrite,omitempty"`
	// Indicates that a HTTP/1.1 client connection to this particular route
	// should be allowed (and expected) to upgrade to a WebSocket connection.
	// The default is false. Istio's reference sidecar implementation (Envoy)
	// expects the first request to this route to contain the WebSocket
	// upgrade headers. Otherwise, the request will be rejected.  Note that
	// Websocket allows secondary protocol negotiation which may then be
	// subject to further routing rules based on the protocol selected.
	WebsocketUpgrade bool `protobuf:"varint,5,opt,name=websocket_upgrade,json=websocketUpgrade" json:"websocket_upgrade,omitempty"`
	// Timeout for HTTP requests.
	Timeout *google_protobuf.Duration `protobuf:"bytes,6,opt,name=timeout" json:"timeout,omitempty"`
	// Retry policy for HTTP requests.
	Retries *HTTPRetry `protobuf:"bytes,7,opt,name=retries" json:"retries,omitempty"`
	// Fault injection policy to apply on HTTP traffic.
	Fault *HTTPFaultInjection `protobuf:"bytes,8,opt,name=fault" json:"fault,omitempty"`
	// Mirror HTTP traffic to a another destination in addition to forwarding
	// the requests to the intended destination. Mirrored traffic is on a
	// best effort basis where the sidecar/gateway will not wait for the
	// mirrored cluster to respond before returning the response from the
	// original destination.  Statistics will be generated for the mirrored
	// destination.
	Mirror *Destination `protobuf:"bytes,9,opt,name=mirror" json:"mirror,omitempty"`
	// Cross-Origin Resource Sharing policy (CORS). Refer to
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
	// for further details about cross origin resource sharing.
	CorsPolicy *CorsPolicy `protobuf:"bytes,10,opt,name=cors_policy,json=corsPolicy" json:"cors_policy,omitempty"`
	// Additional HTTP headers to add before forwarding a request to the
	// destination service.
	AppendHeaders map[string]string `protobuf:"bytes,11,rep,name=append_headers,json=appendHeaders" json:"append_headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HTTPRoute) Reset()                    { *m = HTTPRoute{} }
func (m *HTTPRoute) String() string            { return proto.CompactTextString(m) }
func (*HTTPRoute) ProtoMessage()               {}
func (*HTTPRoute) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *HTTPRoute) GetMatch() []*HTTPMatchRequest {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *HTTPRoute) GetRoute() []*DestinationWeight {
	if m != nil {
		return m.Route
	}
	return nil
}

func (m *HTTPRoute) GetRedirect() *HTTPRedirect {
	if m != nil {
		return m.Redirect
	}
	return nil
}

func (m *HTTPRoute) GetRewrite() *HTTPRewrite {
	if m != nil {
		return m.Rewrite
	}
	return nil
}

func (m *HTTPRoute) GetWebsocketUpgrade() bool {
	if m != nil {
		return m.WebsocketUpgrade
	}
	return false
}

func (m *HTTPRoute) GetTimeout() *google_protobuf.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *HTTPRoute) GetRetries() *HTTPRetry {
	if m != nil {
		return m.Retries
	}
	return nil
}

func (m *HTTPRoute) GetFault() *HTTPFaultInjection {
	if m != nil {
		return m.Fault
	}
	return nil
}

func (m *HTTPRoute) GetMirror() *Destination {
	if m != nil {
		return m.Mirror
	}
	return nil
}

func (m *HTTPRoute) GetCorsPolicy() *CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *HTTPRoute) GetAppendHeaders() map[string]string {
	if m != nil {
		return m.AppendHeaders
	}
	return nil
}

// Describes match conditions and actions for routing TCP traffic.  The
// following routing rule forwards traffic arriving at port 2379 named
// Mongo from 172.17.16.* subnet to another Mongo server on port 5555.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: RouteRule
//     metadata:
//       name: bookinfo-Mongo
//     spec:
//       hosts:
//       - myMongosrv
//       tcp:
//       - match:
//         - port:
//             name: Mongo #only applies to ports named Mongo
//           sourceSubnet: "172.17.16.0/24"
//         route:
//         - destination:
//             name: mongo.prod
//
type TCPRoute struct {
	// Match conditions to be satisfied for the route rule to be
	// activated. All conditions inside a single match block have AND
	// semantics, while the list of match blocks have OR semantics.  The rule
	// is matched if any one of the match blocks succeed.
	Match []*L4MatchAttributes `protobuf:"bytes,1,rep,name=match" json:"match,omitempty"`
	// The destination to which the connection should be forwarded to.
	// Currently, only one destination is allowed for TCP services. When TCP
	// weighted routing support is introduced in Envoy, multiple destinations
	// with weights can be specified.
	Route []*DestinationWeight `protobuf:"bytes,2,rep,name=route" json:"route,omitempty"`
}

func (m *TCPRoute) Reset()                    { *m = TCPRoute{} }
func (m *TCPRoute) String() string            { return proto.CompactTextString(m) }
func (*TCPRoute) ProtoMessage()               {}
func (*TCPRoute) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *TCPRoute) GetMatch() []*L4MatchAttributes {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *TCPRoute) GetRoute() []*DestinationWeight {
	if m != nil {
		return m.Route
	}
	return nil
}

// HttpMatchRequest specifies a set of criterion to be met in order for the
// route rule to be applied to the HTTP request. For example, the following
// route rule restricts the rule to match only requests where the URL path
// starts with /ratings/v2/ and the request contains a "cookie" with value
// "user=jason",
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: RouteRule
//     metadata:
//       name: my-rule
//     spec:
//       hosts:
//       - ratings
//       http:
//       - match:
//         - headers:
//             cookie:
//               regex: "^(.*?;)?(user=jason)(;.*)?"
//             uri:
//               prefix: "/ratings/v2/"
//         route:
//         - destination:
//             name: ratings
//
// MatchCondition CANNOT be empty.
type HTTPMatchRequest struct {
	// URI to match
	// values are case-sensitive and formatted as follows:
	//
	// *exact: "value"* or just *"value"* for exact string match
	//
	// *prefix: "value"* for prefix-based match
	//
	// *regex: "value"* for ECMAscript style regex-based match
	//
	Uri *StringMatch `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
	// URI Scheme
	// values are case-sensitive and formatted as follows:
	//
	// *exact: "value"* or just *"value"* for exact string match
	//
	// *prefix: "value"* for prefix-based match
	//
	// *regex: "value"* for ECMAscript style regex-based match
	//
	Scheme *StringMatch `protobuf:"bytes,2,opt,name=scheme" json:"scheme,omitempty"`
	// HTTP Method
	// values are case-sensitive and formatted as follows:
	//
	// *exact: "value"* or just *"value"* for exact string match
	//
	// *prefix: "value"* for prefix-based match
	//
	// *regex: "value"* for ECMAscript style regex-based match
	//
	Method *StringMatch `protobuf:"bytes,3,opt,name=method" json:"method,omitempty"`
	// HTTP Authority
	// values are case-sensitive and formatted as follows:
	//
	// *exact: "value"* or just *"value"* for exact string match
	//
	// *prefix: "value"* for prefix-based match
	//
	// *regex: "value"* for ECMAscript style regex-based match
	//
	Authority *StringMatch `protobuf:"bytes,4,opt,name=authority" json:"authority,omitempty"`
	// The header keys must be lowercase and use hyphen as the separator,
	// e.g. _x-request-id_.
	//
	// Header values are case-sensitive and formatted as follows:
	//
	// *exact: "value"* or just *"value"* for exact string match
	//
	// *prefix: "value"* for prefix-based match
	//
	// *regex: "value"* for ECMAscript style regex-based match
	//
	// *Note:* The keys _uri_, _scheme_, _method_, and _authority_ will be ignored.
	Headers map[string]*StringMatch `protobuf:"bytes,5,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Specifies the ports on the host that is being addressed. Many services
	// only expose a single port or label ports with the protocols they support,
	// in these cases it is not required to explicitly select the port. Note that
	// selection priority is to first match by name and then match by number.
	//
	// Names must comply with DNS label syntax (rfc1035) and therefore cannot
	// collide with numbers. If there are multiple ports on a service with the
	// same protocol the names should be of the form <protocol-name>-<DNS label>.
	Port *PortSelector `protobuf:"bytes,6,opt,name=port" json:"port,omitempty"`
	// One or more labels that constrain the applicability of a rule to
	// sources with the given labels.
	SourceLabels map[string]string `protobuf:"bytes,7,rep,name=source_labels,json=sourceLabels" json:"source_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HTTPMatchRequest) Reset()                    { *m = HTTPMatchRequest{} }
func (m *HTTPMatchRequest) String() string            { return proto.CompactTextString(m) }
func (*HTTPMatchRequest) ProtoMessage()               {}
func (*HTTPMatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *HTTPMatchRequest) GetUri() *StringMatch {
	if m != nil {
		return m.Uri
	}
	return nil
}

func (m *HTTPMatchRequest) GetScheme() *StringMatch {
	if m != nil {
		return m.Scheme
	}
	return nil
}

func (m *HTTPMatchRequest) GetMethod() *StringMatch {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *HTTPMatchRequest) GetAuthority() *StringMatch {
	if m != nil {
		return m.Authority
	}
	return nil
}

func (m *HTTPMatchRequest) GetHeaders() map[string]*StringMatch {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HTTPMatchRequest) GetPort() *PortSelector {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *HTTPMatchRequest) GetSourceLabels() map[string]string {
	if m != nil {
		return m.SourceLabels
	}
	return nil
}

// Each routing rule is associated with one or more service versions (see
// glossary in beginning of document). Weights associated with the version
// determine the proportion of traffic it receives. For example, the
// following rule will route 25% of traffic for the "reviews" service to
// instances with the "v2" tag and the remaining traffic (i.e., 75%) to
// "v1".
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: RouteRule
//     metadata:
//       name: my-rule
//     spec:
//       hosts:
//       - reviews
//       http:
//       - route:
//         - destination:
//             name: reviews
//             labels:
//               version: v2
//           weight: 25
//         - destination:
//             name: reviews
//             labels:
//               version: v1
//           weight: 75
//
type DestinationWeight struct {
	// REQUIRED. Destination uniquely identifies the instances of a service
	// to which the request/connection should be forwarded to.
	Destination *Destination `protobuf:"bytes,1,opt,name=destination" json:"destination,omitempty"`
	// REQUIRED. The proportion of traffic to be forwarded to the service
	// version. (0-100). Sum of weights across destinations SHOULD BE == 100.
	// If there is only destination in a rule, the weight value is assumed to
	// be 100.
	Weight int32 `protobuf:"varint,2,opt,name=weight" json:"weight,omitempty"`
}

func (m *DestinationWeight) Reset()                    { *m = DestinationWeight{} }
func (m *DestinationWeight) String() string            { return proto.CompactTextString(m) }
func (*DestinationWeight) ProtoMessage()               {}
func (*DestinationWeight) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *DestinationWeight) GetDestination() *Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *DestinationWeight) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

// L4 connection match attributes. Note that L4 connection matching support
// is incomplete.
type L4MatchAttributes struct {
	// IPv4 or IPv6 ip address of destination with optional subnet.  E.g.,
	// a.b.c.d/xx form or just a.b.c.d. This is only valid when the
	// destination service has several IPs and the application explicitly
	// specifies a particular IP.
	DestinationSubnet string `protobuf:"bytes,1,opt,name=destination_subnet,json=destinationSubnet" json:"destination_subnet,omitempty"`
	// Specifies the port on the host that is being addressed. Many services
	// only expose a single port or label ports with the protocols they support,
	// in these cases it is not required to explicitly select the port. Note that
	// selection priority is to first match by name and then match by number.
	//
	// Names must comply with DNS label syntax (rfc1035) and therefore cannot
	// collide with numbers. If there are multiple ports on a service with the
	// same protocol the names should be of the form <protocol-name>-<DNS label>.
	Port *PortSelector `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
	// IPv4 or IPv6 ip address of source with optional subnet. E.g., a.b.c.d/xx
	// form or just a.b.c.d
	SourceSubnet string `protobuf:"bytes,3,opt,name=source_subnet,json=sourceSubnet" json:"source_subnet,omitempty"`
	// One or more labels that constrain the applicability of a rule to
	// sources with the given labels.
	SourceLabels map[string]string `protobuf:"bytes,4,rep,name=source_labels,json=sourceLabels" json:"source_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *L4MatchAttributes) Reset()                    { *m = L4MatchAttributes{} }
func (m *L4MatchAttributes) String() string            { return proto.CompactTextString(m) }
func (*L4MatchAttributes) ProtoMessage()               {}
func (*L4MatchAttributes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *L4MatchAttributes) GetDestinationSubnet() string {
	if m != nil {
		return m.DestinationSubnet
	}
	return ""
}

func (m *L4MatchAttributes) GetPort() *PortSelector {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *L4MatchAttributes) GetSourceSubnet() string {
	if m != nil {
		return m.SourceSubnet
	}
	return ""
}

func (m *L4MatchAttributes) GetSourceLabels() map[string]string {
	if m != nil {
		return m.SourceLabels
	}
	return nil
}

// HTTPRedirect can be used to send a 302 redirect response to the caller,
// where the Authority/Host and the URI in the response can be swapped with
// the specified values. For example, the following route rule redirects
// requests for /v1/getProductRatings API on the ratings service to
// /v1/bookRatings provided by the bookratings service.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: RouteRule
//     metadata:
//       name: my-rule
//     spec:
//       hosts:
//       - ratings
//       http:
//       - match:
//         - uri:
//             exact: /v1/getProductRatings
//       redirect:
//         uri: /v1/bookRatings
//         authority: bookratings.default.svc.cluster.local
//       ...
//
type HTTPRedirect struct {
	// On a redirect, overwrite the Path portion of the URL with this
	// value. Note that the entire path will be replaced, irrespective of the
	// request URI being matched as an exact path or prefix.
	Uri string `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
	// On a redirect, overwrite the Authority/Host portion of the URL with
	// this value.
	Authority string `protobuf:"bytes,2,opt,name=authority" json:"authority,omitempty"`
}

func (m *HTTPRedirect) Reset()                    { *m = HTTPRedirect{} }
func (m *HTTPRedirect) String() string            { return proto.CompactTextString(m) }
func (*HTTPRedirect) ProtoMessage()               {}
func (*HTTPRedirect) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *HTTPRedirect) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *HTTPRedirect) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

// HTTPRewrite can be used to rewrite specific parts of a HTTP request
// before forwarding the request to the destination. Rewrite primitive can
// be used only with the DestinationWeights. The following example
// demonstrates how to rewrite the URL prefix for api call (/ratings) to
// ratings service before making the actual API call.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: RouteRule
//     metadata:
//       name: my-rule
//     spec:
//       hosts:
//       - ratings
//       http:
//       - match:
//         - uri:
//             prefix: /ratings
//         rewrite:
//           uri: /v1/bookRatings
//         route:
//         - destination:
//             name: ratings
//             labels:
//               version: v1
//
type HTTPRewrite struct {
	// rewrite the Path (or the prefix) portion of the URI with this
	// value. If the original URI was matched based on prefix, the value
	// provided in this field will replace the corresponding matched prefix.
	Uri string `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
	// rewrite the Authority/Host header with this value.
	Authority string `protobuf:"bytes,2,opt,name=authority" json:"authority,omitempty"`
}

func (m *HTTPRewrite) Reset()                    { *m = HTTPRewrite{} }
func (m *HTTPRewrite) String() string            { return proto.CompactTextString(m) }
func (*HTTPRewrite) ProtoMessage()               {}
func (*HTTPRewrite) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *HTTPRewrite) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *HTTPRewrite) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

// Describes how to match a given string in HTTP headers. Match is
// case-sensitive.
type StringMatch struct {
	// Types that are valid to be assigned to MatchType:
	//	*StringMatch_Exact
	//	*StringMatch_Prefix
	//	*StringMatch_Regex
	MatchType isStringMatch_MatchType `protobuf_oneof:"match_type"`
}

func (m *StringMatch) Reset()                    { *m = StringMatch{} }
func (m *StringMatch) String() string            { return proto.CompactTextString(m) }
func (*StringMatch) ProtoMessage()               {}
func (*StringMatch) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

type isStringMatch_MatchType interface {
	isStringMatch_MatchType()
}

type StringMatch_Exact struct {
	Exact string `protobuf:"bytes,1,opt,name=exact,oneof"`
}
type StringMatch_Prefix struct {
	Prefix string `protobuf:"bytes,2,opt,name=prefix,oneof"`
}
type StringMatch_Regex struct {
	Regex string `protobuf:"bytes,3,opt,name=regex,oneof"`
}

func (*StringMatch_Exact) isStringMatch_MatchType()  {}
func (*StringMatch_Prefix) isStringMatch_MatchType() {}
func (*StringMatch_Regex) isStringMatch_MatchType()  {}

func (m *StringMatch) GetMatchType() isStringMatch_MatchType {
	if m != nil {
		return m.MatchType
	}
	return nil
}

func (m *StringMatch) GetExact() string {
	if x, ok := m.GetMatchType().(*StringMatch_Exact); ok {
		return x.Exact
	}
	return ""
}

func (m *StringMatch) GetPrefix() string {
	if x, ok := m.GetMatchType().(*StringMatch_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (m *StringMatch) GetRegex() string {
	if x, ok := m.GetMatchType().(*StringMatch_Regex); ok {
		return x.Regex
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StringMatch) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StringMatch_OneofMarshaler, _StringMatch_OneofUnmarshaler, _StringMatch_OneofSizer, []interface{}{
		(*StringMatch_Exact)(nil),
		(*StringMatch_Prefix)(nil),
		(*StringMatch_Regex)(nil),
	}
}

func _StringMatch_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StringMatch)
	// match_type
	switch x := m.MatchType.(type) {
	case *StringMatch_Exact:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Exact)
	case *StringMatch_Prefix:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Prefix)
	case *StringMatch_Regex:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Regex)
	case nil:
	default:
		return fmt.Errorf("StringMatch.MatchType has unexpected type %T", x)
	}
	return nil
}

func _StringMatch_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StringMatch)
	switch tag {
	case 1: // match_type.exact
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MatchType = &StringMatch_Exact{x}
		return true, err
	case 2: // match_type.prefix
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MatchType = &StringMatch_Prefix{x}
		return true, err
	case 3: // match_type.regex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MatchType = &StringMatch_Regex{x}
		return true, err
	default:
		return false, nil
	}
}

func _StringMatch_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StringMatch)
	// match_type
	switch x := m.MatchType.(type) {
	case *StringMatch_Exact:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Exact)))
		n += len(x.Exact)
	case *StringMatch_Prefix:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Prefix)))
		n += len(x.Prefix)
	case *StringMatch_Regex:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Regex)))
		n += len(x.Regex)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Describes the retry policy to use when a HTTP request fails. For
// example, the following rule sets the maximum number of retries to 3 when
// calling ratings:v1 service, with a 2s timeout per retry attempt.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: RouteRule
//     metadata:
//       name: my-rule
//     spec:
//       hosts:
//       - ratings
//       http:
//       - route:
//         - destination:
//             name: ratings
//             labels:
//               version: v1
//         retries:
//           attempts: 3
//           perTryTimeout: 2s
//
type HTTPRetry struct {
	// REQUIRED. Number of retries for a given request. The interval
	// between retries will be determined automatically (25ms+). Actual
	// number of retries attempted depends on the httpReqTimeout.
	Attempts int32 `protobuf:"varint,1,opt,name=attempts" json:"attempts,omitempty"`
	// Timeout per retry attempt for a given request. format: 1h/1m/1s/1ms. MUST BE >=1ms.
	PerTryTimeout *google_protobuf.Duration `protobuf:"bytes,2,opt,name=per_try_timeout,json=perTryTimeout" json:"per_try_timeout,omitempty"`
}

func (m *HTTPRetry) Reset()                    { *m = HTTPRetry{} }
func (m *HTTPRetry) String() string            { return proto.CompactTextString(m) }
func (*HTTPRetry) ProtoMessage()               {}
func (*HTTPRetry) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *HTTPRetry) GetAttempts() int32 {
	if m != nil {
		return m.Attempts
	}
	return 0
}

func (m *HTTPRetry) GetPerTryTimeout() *google_protobuf.Duration {
	if m != nil {
		return m.PerTryTimeout
	}
	return nil
}

// Describes the Cross-Origin Resource Sharing (CORS) policy, for a given
// service. Refer to
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
// for further details about cross origin resource sharing. For example,
// the following rule restricts cross origin requests to those originating
// from example.com domain using HTTP POST/GET, and sets the
// Access-Control-Allow-Credentials header to false. In addition, it only
// exposes X-Foo-bar header and sets an expiry period of 1 day.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: RouteRule
//     metadata:
//       name: my-rule
//     spec:
//       hosts:
//       - ratings
//       http:
//       - route:
//         - destination:
//             name: ratings
//             labels:
//               version: v1
//         corsPolicy:
//           allowOrigin:
//           - example.com
//           allowMethods:
//           - POST
//           - GET
//           allowCredentials: false
//           allowHeaders:
//           - X-Foo-Bar
//           maxAge: "1d"
//
type CorsPolicy struct {
	// The list of origins that are allowed to perform CORS requests. The
	// content will be serialized into the Access-Control-Allow-Origin
	// header. Wildcard * will allow all origins.
	AllowOrigin []string `protobuf:"bytes,1,rep,name=allow_origin,json=allowOrigin" json:"allow_origin,omitempty"`
	// List of HTTP methods allowed to access the resource. The content will
	// be serialized into the Access-Control-Allow-Methods header.
	AllowMethods []string `protobuf:"bytes,2,rep,name=allow_methods,json=allowMethods" json:"allow_methods,omitempty"`
	// List of HTTP headers that can be used when requesting the
	// resource. Serialized to Access-Control-Allow-Methods header.
	AllowHeaders []string `protobuf:"bytes,3,rep,name=allow_headers,json=allowHeaders" json:"allow_headers,omitempty"`
	// A white list of HTTP headers that the browsers are allowed to
	// access. Serialized into Access-Control-Expose-Headers header.
	ExposeHeaders []string `protobuf:"bytes,4,rep,name=expose_headers,json=exposeHeaders" json:"expose_headers,omitempty"`
	// Specifies how long the the results of a preflight request can be
	// cached. Translates to the Access-Control-Max-Age header.
	MaxAge *google_protobuf.Duration `protobuf:"bytes,5,opt,name=max_age,json=maxAge" json:"max_age,omitempty"`
	// Indicates whether the caller is allowed to send the actual request
	// (not the preflight) using credentials. Translates to
	// Access-Control-Allow-Credentials header.
	AllowCredentials *google_protobuf1.BoolValue `protobuf:"bytes,6,opt,name=allow_credentials,json=allowCredentials" json:"allow_credentials,omitempty"`
}

func (m *CorsPolicy) Reset()                    { *m = CorsPolicy{} }
func (m *CorsPolicy) String() string            { return proto.CompactTextString(m) }
func (*CorsPolicy) ProtoMessage()               {}
func (*CorsPolicy) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *CorsPolicy) GetAllowOrigin() []string {
	if m != nil {
		return m.AllowOrigin
	}
	return nil
}

func (m *CorsPolicy) GetAllowMethods() []string {
	if m != nil {
		return m.AllowMethods
	}
	return nil
}

func (m *CorsPolicy) GetAllowHeaders() []string {
	if m != nil {
		return m.AllowHeaders
	}
	return nil
}

func (m *CorsPolicy) GetExposeHeaders() []string {
	if m != nil {
		return m.ExposeHeaders
	}
	return nil
}

func (m *CorsPolicy) GetMaxAge() *google_protobuf.Duration {
	if m != nil {
		return m.MaxAge
	}
	return nil
}

func (m *CorsPolicy) GetAllowCredentials() *google_protobuf1.BoolValue {
	if m != nil {
		return m.AllowCredentials
	}
	return nil
}

// HTTPFaultInjection can be used to specify one or more faults to inject
// while forwarding http requests to the destination specified in the route
// rule.  Fault specification is part of a route rule. Faults include
// aborting the Http request from downstream service, and/or delaying
// proxying of requests. A fault rule MUST HAVE delay or abort or both.
//
// *Note:* Delay and abort faults are independent of one another, even if
// both are specified simultaneously.
type HTTPFaultInjection struct {
	// Delay requests before forwarding, emulating various failures such as
	// network issues, overloaded upstream service, etc.
	Delay *HTTPFaultInjection_Delay `protobuf:"bytes,1,opt,name=delay" json:"delay,omitempty"`
	// Abort Http request attempts and return error codes back to downstream
	// service, giving the impression that the upstream service is faulty.
	Abort *HTTPFaultInjection_Abort `protobuf:"bytes,2,opt,name=abort" json:"abort,omitempty"`
}

func (m *HTTPFaultInjection) Reset()                    { *m = HTTPFaultInjection{} }
func (m *HTTPFaultInjection) String() string            { return proto.CompactTextString(m) }
func (*HTTPFaultInjection) ProtoMessage()               {}
func (*HTTPFaultInjection) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *HTTPFaultInjection) GetDelay() *HTTPFaultInjection_Delay {
	if m != nil {
		return m.Delay
	}
	return nil
}

func (m *HTTPFaultInjection) GetAbort() *HTTPFaultInjection_Abort {
	if m != nil {
		return m.Abort
	}
	return nil
}

// Delay specification is used to inject latency into the request
// forwarding path. The following example will introduce a 5 second delay
// in 10% of the requests to the "v1" version of the "reviews"
// service from all pods with label env: prod
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: RouteRule
//     metadata:
//       name: my-rule
//     spec:
//       hosts:
//       - reviews
//       http:
//       - match:
//         - sourceLabels:
//             env: prod
//         route:
//         - destination:
//             name: reviews
//             labels:
//               version: v1
//         fault:
//           delay:
//             percent: 10
//             fixedDelay: 5s
//
// The _fixedDelay_ field is used to indicate the amount of delay in
// seconds. An optional _percent_ field, a value between 0 and 100, can
// be used to only delay a certain percentage of requests. If left
// unspecified, all request will be delayed.
type HTTPFaultInjection_Delay struct {
	// Percentage of requests on which the delay will be injected (0-100).
	Percent int32 `protobuf:"varint,1,opt,name=percent" json:"percent,omitempty"`
	// Types that are valid to be assigned to HttpDelayType:
	//	*HTTPFaultInjection_Delay_FixedDelay
	//	*HTTPFaultInjection_Delay_ExponentialDelay
	HttpDelayType isHTTPFaultInjection_Delay_HttpDelayType `protobuf_oneof:"http_delay_type"`
}

func (m *HTTPFaultInjection_Delay) Reset()                    { *m = HTTPFaultInjection_Delay{} }
func (m *HTTPFaultInjection_Delay) String() string            { return proto.CompactTextString(m) }
func (*HTTPFaultInjection_Delay) ProtoMessage()               {}
func (*HTTPFaultInjection_Delay) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12, 0} }

type isHTTPFaultInjection_Delay_HttpDelayType interface {
	isHTTPFaultInjection_Delay_HttpDelayType()
}

type HTTPFaultInjection_Delay_FixedDelay struct {
	FixedDelay *google_protobuf.Duration `protobuf:"bytes,2,opt,name=fixed_delay,json=fixedDelay,oneof"`
}
type HTTPFaultInjection_Delay_ExponentialDelay struct {
	ExponentialDelay *google_protobuf.Duration `protobuf:"bytes,3,opt,name=exponential_delay,json=exponentialDelay,oneof"`
}

func (*HTTPFaultInjection_Delay_FixedDelay) isHTTPFaultInjection_Delay_HttpDelayType()       {}
func (*HTTPFaultInjection_Delay_ExponentialDelay) isHTTPFaultInjection_Delay_HttpDelayType() {}

func (m *HTTPFaultInjection_Delay) GetHttpDelayType() isHTTPFaultInjection_Delay_HttpDelayType {
	if m != nil {
		return m.HttpDelayType
	}
	return nil
}

func (m *HTTPFaultInjection_Delay) GetPercent() int32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *HTTPFaultInjection_Delay) GetFixedDelay() *google_protobuf.Duration {
	if x, ok := m.GetHttpDelayType().(*HTTPFaultInjection_Delay_FixedDelay); ok {
		return x.FixedDelay
	}
	return nil
}

func (m *HTTPFaultInjection_Delay) GetExponentialDelay() *google_protobuf.Duration {
	if x, ok := m.GetHttpDelayType().(*HTTPFaultInjection_Delay_ExponentialDelay); ok {
		return x.ExponentialDelay
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HTTPFaultInjection_Delay) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HTTPFaultInjection_Delay_OneofMarshaler, _HTTPFaultInjection_Delay_OneofUnmarshaler, _HTTPFaultInjection_Delay_OneofSizer, []interface{}{
		(*HTTPFaultInjection_Delay_FixedDelay)(nil),
		(*HTTPFaultInjection_Delay_ExponentialDelay)(nil),
	}
}

func _HTTPFaultInjection_Delay_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HTTPFaultInjection_Delay)
	// http_delay_type
	switch x := m.HttpDelayType.(type) {
	case *HTTPFaultInjection_Delay_FixedDelay:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FixedDelay); err != nil {
			return err
		}
	case *HTTPFaultInjection_Delay_ExponentialDelay:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExponentialDelay); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HTTPFaultInjection_Delay.HttpDelayType has unexpected type %T", x)
	}
	return nil
}

func _HTTPFaultInjection_Delay_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HTTPFaultInjection_Delay)
	switch tag {
	case 2: // http_delay_type.fixed_delay
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Duration)
		err := b.DecodeMessage(msg)
		m.HttpDelayType = &HTTPFaultInjection_Delay_FixedDelay{msg}
		return true, err
	case 3: // http_delay_type.exponential_delay
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Duration)
		err := b.DecodeMessage(msg)
		m.HttpDelayType = &HTTPFaultInjection_Delay_ExponentialDelay{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HTTPFaultInjection_Delay_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HTTPFaultInjection_Delay)
	// http_delay_type
	switch x := m.HttpDelayType.(type) {
	case *HTTPFaultInjection_Delay_FixedDelay:
		s := proto.Size(x.FixedDelay)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HTTPFaultInjection_Delay_ExponentialDelay:
		s := proto.Size(x.ExponentialDelay)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Abort specification is used to prematurely abort a request with a
// pre-specified error code. The following example will return an HTTP
// 400 error code for 10% of the requests to the "ratings" service "v1".
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: RouteRule
//     metadata:
//       name: my-rule
//     spec:
//       hosts:
//       - reviews
//       http:
//       - route:
//         - destination:
//             name: reviews
//             labels:
//               version: v1
//         fault:
//           abort:
//             percent: 10
//             httpStatus: 400
//
// The _httpStatus_ field is used to indicate the HTTP status code to
// return to the caller. The optional _percent_ field, a value between 0
// and 100, is used to only abort a certain percentage of requests. If
// not specified, all requests are aborted.
type HTTPFaultInjection_Abort struct {
	// Percentage of requests to be aborted with the error code provided (0-100).
	Percent int32 `protobuf:"varint,1,opt,name=percent" json:"percent,omitempty"`
	// Types that are valid to be assigned to ErrorType:
	//	*HTTPFaultInjection_Abort_HttpStatus
	//	*HTTPFaultInjection_Abort_GrpcStatus
	//	*HTTPFaultInjection_Abort_Http2Error
	ErrorType isHTTPFaultInjection_Abort_ErrorType `protobuf_oneof:"error_type"`
}

func (m *HTTPFaultInjection_Abort) Reset()                    { *m = HTTPFaultInjection_Abort{} }
func (m *HTTPFaultInjection_Abort) String() string            { return proto.CompactTextString(m) }
func (*HTTPFaultInjection_Abort) ProtoMessage()               {}
func (*HTTPFaultInjection_Abort) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12, 1} }

type isHTTPFaultInjection_Abort_ErrorType interface {
	isHTTPFaultInjection_Abort_ErrorType()
}

type HTTPFaultInjection_Abort_HttpStatus struct {
	HttpStatus int32 `protobuf:"varint,2,opt,name=http_status,json=httpStatus,oneof"`
}
type HTTPFaultInjection_Abort_GrpcStatus struct {
	GrpcStatus string `protobuf:"bytes,3,opt,name=grpc_status,json=grpcStatus,oneof"`
}
type HTTPFaultInjection_Abort_Http2Error struct {
	Http2Error string `protobuf:"bytes,4,opt,name=http2_error,json=http2Error,oneof"`
}

func (*HTTPFaultInjection_Abort_HttpStatus) isHTTPFaultInjection_Abort_ErrorType() {}
func (*HTTPFaultInjection_Abort_GrpcStatus) isHTTPFaultInjection_Abort_ErrorType() {}
func (*HTTPFaultInjection_Abort_Http2Error) isHTTPFaultInjection_Abort_ErrorType() {}

func (m *HTTPFaultInjection_Abort) GetErrorType() isHTTPFaultInjection_Abort_ErrorType {
	if m != nil {
		return m.ErrorType
	}
	return nil
}

func (m *HTTPFaultInjection_Abort) GetPercent() int32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *HTTPFaultInjection_Abort) GetHttpStatus() int32 {
	if x, ok := m.GetErrorType().(*HTTPFaultInjection_Abort_HttpStatus); ok {
		return x.HttpStatus
	}
	return 0
}

func (m *HTTPFaultInjection_Abort) GetGrpcStatus() string {
	if x, ok := m.GetErrorType().(*HTTPFaultInjection_Abort_GrpcStatus); ok {
		return x.GrpcStatus
	}
	return ""
}

func (m *HTTPFaultInjection_Abort) GetHttp2Error() string {
	if x, ok := m.GetErrorType().(*HTTPFaultInjection_Abort_Http2Error); ok {
		return x.Http2Error
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HTTPFaultInjection_Abort) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HTTPFaultInjection_Abort_OneofMarshaler, _HTTPFaultInjection_Abort_OneofUnmarshaler, _HTTPFaultInjection_Abort_OneofSizer, []interface{}{
		(*HTTPFaultInjection_Abort_HttpStatus)(nil),
		(*HTTPFaultInjection_Abort_GrpcStatus)(nil),
		(*HTTPFaultInjection_Abort_Http2Error)(nil),
	}
}

func _HTTPFaultInjection_Abort_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HTTPFaultInjection_Abort)
	// error_type
	switch x := m.ErrorType.(type) {
	case *HTTPFaultInjection_Abort_HttpStatus:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.HttpStatus))
	case *HTTPFaultInjection_Abort_GrpcStatus:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.GrpcStatus)
	case *HTTPFaultInjection_Abort_Http2Error:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Http2Error)
	case nil:
	default:
		return fmt.Errorf("HTTPFaultInjection_Abort.ErrorType has unexpected type %T", x)
	}
	return nil
}

func _HTTPFaultInjection_Abort_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HTTPFaultInjection_Abort)
	switch tag {
	case 2: // error_type.http_status
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ErrorType = &HTTPFaultInjection_Abort_HttpStatus{int32(x)}
		return true, err
	case 3: // error_type.grpc_status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ErrorType = &HTTPFaultInjection_Abort_GrpcStatus{x}
		return true, err
	case 4: // error_type.http2_error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ErrorType = &HTTPFaultInjection_Abort_Http2Error{x}
		return true, err
	default:
		return false, nil
	}
}

func _HTTPFaultInjection_Abort_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HTTPFaultInjection_Abort)
	// error_type
	switch x := m.ErrorType.(type) {
	case *HTTPFaultInjection_Abort_HttpStatus:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.HttpStatus))
	case *HTTPFaultInjection_Abort_GrpcStatus:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.GrpcStatus)))
		n += len(x.GrpcStatus)
	case *HTTPFaultInjection_Abort_Http2Error:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Http2Error)))
		n += len(x.Http2Error)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// PortSelector specifies the name or number of a port to be used for
// matching or selection for final routing.
type PortSelector struct {
	// Types that are valid to be assigned to Port:
	//	*PortSelector_Number
	//	*PortSelector_Name
	Port isPortSelector_Port `protobuf_oneof:"port"`
}

func (m *PortSelector) Reset()                    { *m = PortSelector{} }
func (m *PortSelector) String() string            { return proto.CompactTextString(m) }
func (*PortSelector) ProtoMessage()               {}
func (*PortSelector) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

type isPortSelector_Port interface {
	isPortSelector_Port()
}

type PortSelector_Number struct {
	Number uint32 `protobuf:"varint,1,opt,name=number,oneof"`
}
type PortSelector_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,oneof"`
}

func (*PortSelector_Number) isPortSelector_Port() {}
func (*PortSelector_Name) isPortSelector_Port()   {}

func (m *PortSelector) GetPort() isPortSelector_Port {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *PortSelector) GetNumber() uint32 {
	if x, ok := m.GetPort().(*PortSelector_Number); ok {
		return x.Number
	}
	return 0
}

func (m *PortSelector) GetName() string {
	if x, ok := m.GetPort().(*PortSelector_Name); ok {
		return x.Name
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PortSelector) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PortSelector_OneofMarshaler, _PortSelector_OneofUnmarshaler, _PortSelector_OneofSizer, []interface{}{
		(*PortSelector_Number)(nil),
		(*PortSelector_Name)(nil),
	}
}

func _PortSelector_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PortSelector)
	// port
	switch x := m.Port.(type) {
	case *PortSelector_Number:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Number))
	case *PortSelector_Name:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Name)
	case nil:
	default:
		return fmt.Errorf("PortSelector.Port has unexpected type %T", x)
	}
	return nil
}

func _PortSelector_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PortSelector)
	switch tag {
	case 1: // port.number
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Port = &PortSelector_Number{uint32(x)}
		return true, err
	case 2: // port.name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Port = &PortSelector_Name{x}
		return true, err
	default:
		return false, nil
	}
}

func _PortSelector_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PortSelector)
	// port
	switch x := m.Port.(type) {
	case *PortSelector_Number:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Number))
	case *PortSelector_Name:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Name)))
		n += len(x.Name)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// UpstreamSettings defines client/caller-side policies that determine how
// to handle traffic bound to a particular destination. The policy
// specifies configuration for load balancing, connection pool size from
// the sidecar, and outlier detection settings to detect and evict
// unhealthy hosts from the load balancing pool. These settings are common
// to all HTTP/TCP destinations defined in the route rule. In other words,
// these settings apply to all connections/requests arriving at the sidecar
// for the hosts specified in the routing rule. For example, a simple load
// balancing policy for the ratings service would look as follows:
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: RouteRule
//     metadata:
//       name: bookinfo
//     spec:
//       hosts:
//       - myredissrv
//       - mybookinfo.com
//       http:
//       - route:
//         - destination:
//             name: redis.prod
//       upstreamSettings:
//         lbPolicy: LEAST_CONN
type UpstreamSettings struct {
	// Upstream load balancing policy
	LbPolicy UpstreamSettings_LBPolicy `protobuf:"varint,1,opt,name=lb_policy,json=lbPolicy,enum=istio.routing.v1alpha2.UpstreamSettings_LBPolicy" json:"lb_policy,omitempty"`
	// Settings controlling the volume of connections to an upstream service
	ConnectionPool *ConnectionPoolSettings `protobuf:"bytes,2,opt,name=connection_pool,json=connectionPool" json:"connection_pool,omitempty"`
	// Settings controlling eviction of unhealthy hosts from the load balancing pool
	OutlierDetection *OutlierDetection `protobuf:"bytes,3,opt,name=outlier_detection,json=outlierDetection" json:"outlier_detection,omitempty"`
}

func (m *UpstreamSettings) Reset()                    { *m = UpstreamSettings{} }
func (m *UpstreamSettings) String() string            { return proto.CompactTextString(m) }
func (*UpstreamSettings) ProtoMessage()               {}
func (*UpstreamSettings) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *UpstreamSettings) GetLbPolicy() UpstreamSettings_LBPolicy {
	if m != nil {
		return m.LbPolicy
	}
	return UpstreamSettings_DEFAULT
}

func (m *UpstreamSettings) GetConnectionPool() *ConnectionPoolSettings {
	if m != nil {
		return m.ConnectionPool
	}
	return nil
}

func (m *UpstreamSettings) GetOutlierDetection() *OutlierDetection {
	if m != nil {
		return m.OutlierDetection
	}
	return nil
}

// Connection pool settings for an upstream host. The settings apply to
// each individual host in the upstream service.  See Envoy's [circuit
// breaker](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/circuit_breaking)
// for more details. Connection pool settings can be applied at the TCP
// level as well as at HTTP level.
//
// For example, the following rule sets a limit of 100 connections to redis
// service called myredissrv with a connect timeout of 30ms
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: RouteRule
//     metadata:
//       name: bookinfo-redis
//     spec:
//       hosts:
//       - myredissrv
//       tcp:
//       - match:
//         - port:
//             name: redis
//           sourceSubnet: "172.17.16.0/24"
//         route:
//         - destination:
//             name: redis.prod
//       upstreamSettings:
//         connectionPool:
//           tcp:
//             maxConnections: 100
//             connectTimeout: 30ms
//
// Note that the connection pool settings are applicable across all
// upstreams defined by the route rule (both TCP and HTTP).
type ConnectionPoolSettings struct {
	// Settings common to both HTTP and TCP upstream connections.
	Tcp *ConnectionPoolSettings_TCPSettings `protobuf:"bytes,1,opt,name=tcp" json:"tcp,omitempty"`
	// HTTP connection pool settings.
	Http *ConnectionPoolSettings_HTTPSettings `protobuf:"bytes,2,opt,name=http" json:"http,omitempty"`
}

func (m *ConnectionPoolSettings) Reset()                    { *m = ConnectionPoolSettings{} }
func (m *ConnectionPoolSettings) String() string            { return proto.CompactTextString(m) }
func (*ConnectionPoolSettings) ProtoMessage()               {}
func (*ConnectionPoolSettings) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *ConnectionPoolSettings) GetTcp() *ConnectionPoolSettings_TCPSettings {
	if m != nil {
		return m.Tcp
	}
	return nil
}

func (m *ConnectionPoolSettings) GetHttp() *ConnectionPoolSettings_HTTPSettings {
	if m != nil {
		return m.Http
	}
	return nil
}

// Settings common to both HTTP and TCP upstream connections.
type ConnectionPoolSettings_TCPSettings struct {
	// Maximum number of HTTP/TCP connections to a destination host.
	MaxConnections int32 `protobuf:"varint,1,opt,name=max_connections,json=maxConnections" json:"max_connections,omitempty"`
	// TCP connection timeout.
	ConnectTimeout *google_protobuf.Duration `protobuf:"bytes,2,opt,name=connect_timeout,json=connectTimeout" json:"connect_timeout,omitempty"`
}

func (m *ConnectionPoolSettings_TCPSettings) Reset()         { *m = ConnectionPoolSettings_TCPSettings{} }
func (m *ConnectionPoolSettings_TCPSettings) String() string { return proto.CompactTextString(m) }
func (*ConnectionPoolSettings_TCPSettings) ProtoMessage()    {}
func (*ConnectionPoolSettings_TCPSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{15, 0}
}

func (m *ConnectionPoolSettings_TCPSettings) GetMaxConnections() int32 {
	if m != nil {
		return m.MaxConnections
	}
	return 0
}

func (m *ConnectionPoolSettings_TCPSettings) GetConnectTimeout() *google_protobuf.Duration {
	if m != nil {
		return m.ConnectTimeout
	}
	return nil
}

// Settings applicable to HTTP connections.
type ConnectionPoolSettings_HTTPSettings struct {
	// Maximum number of pending HTTP requests to a destination. Default 1024.
	MaxPendingRequests int32 `protobuf:"varint,2,opt,name=max_pending_requests,json=maxPendingRequests" json:"max_pending_requests,omitempty"`
	// Maximum number of requests to a backend. Default 1024.
	MaxRequests int32 `protobuf:"varint,3,opt,name=max_requests,json=maxRequests" json:"max_requests,omitempty"`
	// Minimum time the circuit will be closed. format: 1h/1m/1s/1ms. MUST
	// BE >=1ms. Default is 30s.
	SleepWindow *google_protobuf.Duration `protobuf:"bytes,4,opt,name=sleep_window,json=sleepWindow" json:"sleep_window,omitempty"`
	// Number of 5XX errors before circuit is opened. Defaults to 5.
	ConsecutiveErrors int32 `protobuf:"varint,5,opt,name=consecutive_errors,json=consecutiveErrors" json:"consecutive_errors,omitempty"`
	// Time interval between ejection sweep analysis. format:
	// 1h/1m/1s/1ms. MUST BE >=1ms. Default is 10s.
	DetectionInterval *google_protobuf.Duration `protobuf:"bytes,6,opt,name=detection_interval,json=detectionInterval" json:"detection_interval,omitempty"`
	// Maximum number of requests per connection to a backend. Setting this
	// parameter to 1 disables keep alive.
	MaxRequestsPerConnection int32 `protobuf:"varint,7,opt,name=max_requests_per_connection,json=maxRequestsPerConnection" json:"max_requests_per_connection,omitempty"`
}

func (m *ConnectionPoolSettings_HTTPSettings) Reset()         { *m = ConnectionPoolSettings_HTTPSettings{} }
func (m *ConnectionPoolSettings_HTTPSettings) String() string { return proto.CompactTextString(m) }
func (*ConnectionPoolSettings_HTTPSettings) ProtoMessage()    {}
func (*ConnectionPoolSettings_HTTPSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{15, 1}
}

func (m *ConnectionPoolSettings_HTTPSettings) GetMaxPendingRequests() int32 {
	if m != nil {
		return m.MaxPendingRequests
	}
	return 0
}

func (m *ConnectionPoolSettings_HTTPSettings) GetMaxRequests() int32 {
	if m != nil {
		return m.MaxRequests
	}
	return 0
}

func (m *ConnectionPoolSettings_HTTPSettings) GetSleepWindow() *google_protobuf.Duration {
	if m != nil {
		return m.SleepWindow
	}
	return nil
}

func (m *ConnectionPoolSettings_HTTPSettings) GetConsecutiveErrors() int32 {
	if m != nil {
		return m.ConsecutiveErrors
	}
	return 0
}

func (m *ConnectionPoolSettings_HTTPSettings) GetDetectionInterval() *google_protobuf.Duration {
	if m != nil {
		return m.DetectionInterval
	}
	return nil
}

func (m *ConnectionPoolSettings_HTTPSettings) GetMaxRequestsPerConnection() int32 {
	if m != nil {
		return m.MaxRequestsPerConnection
	}
	return 0
}

// A Circuit breaker implementation that tracks the status of each
// individual host in the upstream service.  While currently applicable to
// only HTTP services, future versions will support opaque TCP services as
// well. For HTTP services, hosts that continually return errors for API
// calls are ejected from the pool for a pre-defined period of time. See
// Envoy's [outlier
// detection](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/outlier)
// for more details.
//
// The following rule sets a connection pool size of 100 connections and
// 1000 concurrent requests, with no more than 10 req/connection to
// "reviews" service. In addition, it configures
// upstream hosts to be scanned every 5 mins, such that any host that fails 7
// consecutive times with 5XX error code will be ejected for 15 minutes.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: RouteRule
//     metadata:
//       name: reviews-cb-policy
//     spec:
//       hosts:
//       - reviews
//       http:
//       - route:
//         - destination:
//             name: reviews
//             labels:
//               version: v1
//       upstreamSettings:
//         connectionPool:
//           tcp:
//             maxConnections: 100
//           http:
//             maxRequests: 1000
//             maxRequestsPerConnection: 10
//         outlierDetection:
//           http:
//             consecutiveErrors: 7
//             interval: 5m
//             baseEjectionTime: 15m
//
type OutlierDetection struct {
	// Settings for HTTP connections.
	Http *OutlierDetection_HTTPSettings `protobuf:"bytes,1,opt,name=http" json:"http,omitempty"`
}

func (m *OutlierDetection) Reset()                    { *m = OutlierDetection{} }
func (m *OutlierDetection) String() string            { return proto.CompactTextString(m) }
func (*OutlierDetection) ProtoMessage()               {}
func (*OutlierDetection) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *OutlierDetection) GetHttp() *OutlierDetection_HTTPSettings {
	if m != nil {
		return m.Http
	}
	return nil
}

// Outlier detection settings for HTTP connections.
type OutlierDetection_HTTPSettings struct {
	// Number of 5XX errors before a host is ejected from the connection pool. Defaults to 5.
	ConsecutiveErrors int32 `protobuf:"varint,1,opt,name=consecutive_errors,json=consecutiveErrors" json:"consecutive_errors,omitempty"`
	// Time interval between ejection sweep analysis. format:
	// 1h/1m/1s/1ms. MUST BE >=1ms. Default is 10s.
	Interval *google_protobuf.Duration `protobuf:"bytes,2,opt,name=interval" json:"interval,omitempty"`
	// Minimum ejection duration. A host will remain ejected for a period
	// equal to the product of minimum ejection duration and the number of
	// times the host has been ejected. This technique allows the system to
	// automatically increase the ejection period for unhealthy upstream
	// servers. format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is 30s.
	BaseEjectionTime *google_protobuf.Duration `protobuf:"bytes,3,opt,name=base_ejection_time,json=baseEjectionTime" json:"base_ejection_time,omitempty"`
	// Maximum % of hosts in the load balancing pool for the upstream service
	// that can be ejected. Defaults to 10%.
	MaxEjectionPercent int32 `protobuf:"varint,4,opt,name=max_ejection_percent,json=maxEjectionPercent" json:"max_ejection_percent,omitempty"`
}

func (m *OutlierDetection_HTTPSettings) Reset()         { *m = OutlierDetection_HTTPSettings{} }
func (m *OutlierDetection_HTTPSettings) String() string { return proto.CompactTextString(m) }
func (*OutlierDetection_HTTPSettings) ProtoMessage()    {}
func (*OutlierDetection_HTTPSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{16, 0}
}

func (m *OutlierDetection_HTTPSettings) GetConsecutiveErrors() int32 {
	if m != nil {
		return m.ConsecutiveErrors
	}
	return 0
}

func (m *OutlierDetection_HTTPSettings) GetInterval() *google_protobuf.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *OutlierDetection_HTTPSettings) GetBaseEjectionTime() *google_protobuf.Duration {
	if m != nil {
		return m.BaseEjectionTime
	}
	return nil
}

func (m *OutlierDetection_HTTPSettings) GetMaxEjectionPercent() int32 {
	if m != nil {
		return m.MaxEjectionPercent
	}
	return 0
}

func init() {
	proto.RegisterType((*RouteRule)(nil), "istio.routing.v1alpha2.RouteRule")
	proto.RegisterType((*Destination)(nil), "istio.routing.v1alpha2.Destination")
	proto.RegisterType((*HTTPRoute)(nil), "istio.routing.v1alpha2.HTTPRoute")
	proto.RegisterType((*TCPRoute)(nil), "istio.routing.v1alpha2.TCPRoute")
	proto.RegisterType((*HTTPMatchRequest)(nil), "istio.routing.v1alpha2.HTTPMatchRequest")
	proto.RegisterType((*DestinationWeight)(nil), "istio.routing.v1alpha2.DestinationWeight")
	proto.RegisterType((*L4MatchAttributes)(nil), "istio.routing.v1alpha2.L4MatchAttributes")
	proto.RegisterType((*HTTPRedirect)(nil), "istio.routing.v1alpha2.HTTPRedirect")
	proto.RegisterType((*HTTPRewrite)(nil), "istio.routing.v1alpha2.HTTPRewrite")
	proto.RegisterType((*StringMatch)(nil), "istio.routing.v1alpha2.StringMatch")
	proto.RegisterType((*HTTPRetry)(nil), "istio.routing.v1alpha2.HTTPRetry")
	proto.RegisterType((*CorsPolicy)(nil), "istio.routing.v1alpha2.CorsPolicy")
	proto.RegisterType((*HTTPFaultInjection)(nil), "istio.routing.v1alpha2.HTTPFaultInjection")
	proto.RegisterType((*HTTPFaultInjection_Delay)(nil), "istio.routing.v1alpha2.HTTPFaultInjection.Delay")
	proto.RegisterType((*HTTPFaultInjection_Abort)(nil), "istio.routing.v1alpha2.HTTPFaultInjection.Abort")
	proto.RegisterType((*PortSelector)(nil), "istio.routing.v1alpha2.PortSelector")
	proto.RegisterType((*UpstreamSettings)(nil), "istio.routing.v1alpha2.UpstreamSettings")
	proto.RegisterType((*ConnectionPoolSettings)(nil), "istio.routing.v1alpha2.ConnectionPoolSettings")
	proto.RegisterType((*ConnectionPoolSettings_TCPSettings)(nil), "istio.routing.v1alpha2.ConnectionPoolSettings.TCPSettings")
	proto.RegisterType((*ConnectionPoolSettings_HTTPSettings)(nil), "istio.routing.v1alpha2.ConnectionPoolSettings.HTTPSettings")
	proto.RegisterType((*OutlierDetection)(nil), "istio.routing.v1alpha2.OutlierDetection")
	proto.RegisterType((*OutlierDetection_HTTPSettings)(nil), "istio.routing.v1alpha2.OutlierDetection.HTTPSettings")
	proto.RegisterEnum("istio.routing.v1alpha2.UpstreamSettings_LBPolicy", UpstreamSettings_LBPolicy_name, UpstreamSettings_LBPolicy_value)
}

func init() { proto.RegisterFile("routing/v1alpha2/route_rule.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1742 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcd, 0x72, 0x23, 0x49,
	0x11, 0x1e, 0x49, 0xd6, 0x5f, 0xb6, 0x6c, 0x4b, 0x15, 0x13, 0x13, 0x8d, 0x20, 0x08, 0x8f, 0x16,
	0x02, 0x03, 0x81, 0xbc, 0xab, 0x5d, 0x47, 0xec, 0xce, 0xec, 0xec, 0x8e, 0x6c, 0x79, 0xd6, 0x13,
	0xe1, 0xb1, 0x1c, 0x6d, 0x9b, 0x39, 0x70, 0x68, 0x5a, 0xad, 0x1c, 0xa9, 0x77, 0x5b, 0x5d, 0x4d,
	0x75, 0xf5, 0x48, 0xe2, 0x19, 0x88, 0xd8, 0x0b, 0x07, 0x2e, 0xbc, 0x09, 0x47, 0xee, 0x5c, 0xe1,
	0xc4, 0x23, 0xf0, 0x06, 0x40, 0xd4, 0x4f, 0xb7, 0x7a, 0x6c, 0xeb, 0x2f, 0xe0, 0xa6, 0xca, 0xfa,
	0xbe, 0xec, 0xaa, 0xca, 0x2f, 0xb3, 0xb2, 0x04, 0x4f, 0x19, 0x8d, 0xb9, 0x17, 0x8c, 0x8e, 0xde,
	0x7f, 0xe2, 0xf8, 0xe1, 0xd8, 0xe9, 0x1c, 0x09, 0x03, 0xda, 0x2c, 0xf6, 0xb1, 0x1d, 0x32, 0xca,
	0x29, 0x79, 0xe2, 0x45, 0xdc, 0xa3, 0x6d, 0x0d, 0x6c, 0x27, 0xc0, 0xe6, 0x8f, 0x47, 0x94, 0x8e,
	0x7c, 0x3c, 0x92, 0xa8, 0x41, 0xfc, 0xee, 0x68, 0x18, 0x33, 0x87, 0x7b, 0x34, 0x50, 0xbc, 0xfb,
	0xf3, 0x53, 0xe6, 0x84, 0x21, 0xb2, 0x48, 0xcd, 0xb7, 0xfe, 0x93, 0x83, 0xaa, 0x25, 0x3e, 0x66,
	0xc5, 0x3e, 0x92, 0xc7, 0x50, 0x1c, 0xd3, 0x88, 0x47, 0x66, 0xee, 0xa0, 0x70, 0x58, 0xb5, 0xd4,
	0x80, 0x34, 0xa1, 0x32, 0x72, 0x38, 0x4e, 0x9d, 0x79, 0x64, 0xe6, 0xe5, 0x44, 0x3a, 0x26, 0xc7,
	0xb0, 0x33, 0xe6, 0x3c, 0x34, 0x0b, 0x07, 0x85, 0x43, 0xa3, 0xf3, 0xb4, 0xfd, 0xf0, 0x32, 0xdb,
	0xe7, 0x37, 0x37, 0x57, 0xea, 0x33, 0x12, 0x4e, 0x3a, 0x50, 0xe0, 0x6e, 0x68, 0xee, 0x48, 0xd6,
	0xc1, 0x32, 0xd6, 0xcd, 0xa9, 0x26, 0x09, 0x30, 0xb9, 0x85, 0x46, 0x1c, 0x46, 0x9c, 0xa1, 0x33,
	0xb1, 0x23, 0xe4, 0x02, 0x1a, 0x99, 0xa5, 0x83, 0xdc, 0xa1, 0xd1, 0x39, 0x5c, 0xe6, 0xe1, 0x56,
	0x13, 0xae, 0x35, 0xde, 0xaa, 0xc7, 0x77, 0x2c, 0xad, 0x7f, 0xe6, 0xc0, 0xe8, 0x61, 0xc4, 0xbd,
	0x40, 0x9e, 0x1b, 0x21, 0xb0, 0x13, 0x38, 0x13, 0x34, 0x73, 0x07, 0xb9, 0xc3, 0xaa, 0x25, 0x7f,
	0x93, 0x6f, 0xa0, 0xe4, 0x3b, 0x03, 0xf4, 0xd5, 0xfe, 0x8d, 0xce, 0xd1, 0xb2, 0xef, 0x65, 0x1c,
	0xb5, 0x2f, 0x24, 0xe3, 0x2c, 0xe0, 0x6c, 0x6e, 0x69, 0x3a, 0xf9, 0x1c, 0x76, 0x42, 0xca, 0xb8,
	0x59, 0x90, 0xcb, 0xfe, 0xc9, 0x32, 0x37, 0x57, 0x94, 0xf1, 0x6b, 0xf4, 0xd1, 0xe5, 0x94, 0x59,
	0x92, 0xd1, 0xfc, 0x02, 0x8c, 0x8c, 0x43, 0x52, 0x87, 0xc2, 0x77, 0x38, 0xd7, 0x8b, 0x14, 0x3f,
	0x45, 0xec, 0xde, 0x3b, 0x7e, 0x8c, 0x66, 0x5e, 0xda, 0xd4, 0xe0, 0x59, 0xfe, 0xf3, 0x5c, 0xeb,
	0xfb, 0x12, 0x54, 0xd3, 0x00, 0x90, 0xaf, 0xa0, 0x38, 0x71, 0xb8, 0x3b, 0x96, 0x31, 0x5e, 0x71,
	0x74, 0x82, 0xf1, 0x46, 0x00, 0x2d, 0xfc, 0x5d, 0x8c, 0x11, 0xb7, 0x14, 0x8d, 0x7c, 0x0d, 0x45,
	0xa9, 0x4e, 0x7d, 0x14, 0x3f, 0xdf, 0xe0, 0x28, 0xde, 0xa2, 0x37, 0x1a, 0x73, 0x4b, 0xf1, 0xc8,
	0x4b, 0xa8, 0x30, 0x1c, 0x7a, 0x0c, 0xdd, 0xb5, 0xe7, 0x20, 0x57, 0xad, 0xb1, 0x56, 0xca, 0x22,
	0x2f, 0xa0, 0xcc, 0x70, 0xca, 0x3c, 0x8e, 0xe6, 0x8e, 0x74, 0xf0, 0xd1, 0x6a, 0x07, 0x12, 0x6a,
	0x25, 0x1c, 0xf2, 0x4b, 0x68, 0x4c, 0x71, 0x10, 0x51, 0xf7, 0x3b, 0xe4, 0x76, 0x1c, 0x8e, 0x98,
	0x33, 0x44, 0xb3, 0x78, 0x90, 0x3b, 0xac, 0x58, 0xf5, 0x74, 0xe2, 0x56, 0xd9, 0xc9, 0xa7, 0x50,
	0xe6, 0xde, 0x04, 0x69, 0xcc, 0xb5, 0xd6, 0x7e, 0xd0, 0x56, 0x29, 0xd5, 0x4e, 0x52, 0xaa, 0xdd,
	0xd3, 0x29, 0x67, 0x25, 0x48, 0xf2, 0x5c, 0x2c, 0x90, 0x33, 0x0f, 0x23, 0xb3, 0x2c, 0x49, 0xab,
	0x13, 0x03, 0x85, 0x44, 0x12, 0x06, 0x79, 0x09, 0xc5, 0x77, 0x4e, 0xec, 0x73, 0xb3, 0x22, 0xa9,
	0xbf, 0x58, 0x45, 0x7d, 0x25, 0x80, 0xaf, 0x83, 0x6f, 0xd1, 0x95, 0x0b, 0x50, 0x44, 0xf2, 0x1c,
	0x4a, 0x13, 0x8f, 0x31, 0xca, 0xcc, 0xea, 0xea, 0xe3, 0xc9, 0xc4, 0xc8, 0xd2, 0x14, 0x72, 0x0a,
	0x86, 0x4b, 0x59, 0x64, 0x87, 0xd4, 0xf7, 0xdc, 0xb9, 0x09, 0xd2, 0x43, 0x6b, 0x99, 0x87, 0x53,
	0xca, 0xa2, 0x2b, 0x89, 0xb4, 0xc0, 0x4d, 0x7f, 0x93, 0xdf, 0xc0, 0x9e, 0x28, 0x33, 0xc1, 0xd0,
	0x1e, 0xa3, 0x33, 0x44, 0x16, 0x99, 0x86, 0x54, 0xcb, 0x67, 0x6b, 0x0b, 0x44, 0xbb, 0x2b, 0x79,
	0xe7, 0x8a, 0xa6, 0xb2, 0x67, 0xd7, 0xc9, 0xda, 0x9a, 0x2f, 0x81, 0xdc, 0x07, 0x6d, 0x95, 0x11,
	0x7f, 0xc8, 0x41, 0x25, 0x29, 0x2e, 0x42, 0xd0, 0xd9, 0x84, 0x58, 0x2a, 0xe8, 0x8b, 0xcf, 0x64,
	0x3a, 0x74, 0x39, 0x67, 0xde, 0x20, 0xe6, 0x18, 0xfd, 0xbf, 0x32, 0xa2, 0xf5, 0xc7, 0x22, 0xd4,
	0xef, 0xa6, 0x1b, 0x39, 0x86, 0x42, 0xcc, 0x3c, 0xb9, 0x9f, 0x15, 0x11, 0xbc, 0xe6, 0xcc, 0x0b,
	0x46, 0x8a, 0x28, 0xf0, 0x22, 0xf6, 0x91, 0x3b, 0xc6, 0x89, 0xda, 0xf5, 0x86, 0x4c, 0x4d, 0x91,
	0xc2, 0x41, 0x3e, 0xa6, 0x43, 0x9d, 0x98, 0x9b, 0x91, 0x15, 0x85, 0x74, 0xa1, 0xea, 0xc4, 0x7c,
	0x4c, 0x99, 0xc7, 0xe7, 0xeb, 0xf2, 0x32, 0xcb, 0x5f, 0xb0, 0x48, 0x1f, 0xca, 0x89, 0x5e, 0x8a,
	0xf2, 0x2c, 0x8f, 0x37, 0xad, 0x4e, 0xed, 0x0f, 0x04, 0x93, 0x78, 0x49, 0xeb, 0x6d, 0x69, 0xdb,
	0x7a, 0x4b, 0x6c, 0xd8, 0x8d, 0x68, 0xcc, 0x5c, 0xb4, 0x75, 0xe5, 0x2f, 0xcb, 0x05, 0x3d, 0xdb,
	0x78, 0x41, 0xd7, 0x92, 0x9d, 0xbd, 0x04, 0x6a, 0x51, 0xc6, 0xd4, 0xb4, 0xa1, 0xb6, 0x46, 0xbf,
	0x5f, 0x64, 0xf5, 0xbb, 0xe1, 0x61, 0x2e, 0x44, 0xde, 0xfc, 0x1a, 0x1a, 0xf7, 0xd6, 0xb0, 0x55,
	0x96, 0x30, 0x68, 0xdc, 0x93, 0x2c, 0x39, 0x03, 0x63, 0xb8, 0x30, 0xae, 0x93, 0x67, 0xb6, 0xc0,
	0x64, 0x79, 0xe4, 0x09, 0x94, 0xa6, 0xd2, 0xa1, 0xfc, 0x6c, 0xd1, 0xd2, 0xa3, 0xd6, 0x5f, 0xf3,
	0xd0, 0xb8, 0x97, 0x68, 0xe4, 0x57, 0x40, 0x32, 0x64, 0x3b, 0x8a, 0x07, 0x01, 0x72, 0xbd, 0x89,
	0x46, 0x66, 0xe6, 0x5a, 0x4e, 0xa4, 0x51, 0xcf, 0x6f, 0x1d, 0xf5, 0x8f, 0xd2, 0xa8, 0xeb, 0x6f,
	0x14, 0xe4, 0x37, 0x74, 0xe4, 0xb4, 0xfb, 0xdf, 0xde, 0x95, 0x86, 0x6a, 0x63, 0x9e, 0x6f, 0x5c,
	0x38, 0xd6, 0x6a, 0xe3, 0x7f, 0x0e, 0xdd, 0x57, 0x50, 0xcb, 0xde, 0x9d, 0x82, 0x9b, 0x14, 0x93,
	0xaa, 0xaa, 0x13, 0x3f, 0xca, 0x66, 0xab, 0xe2, 0x2f, 0x0c, 0xad, 0x17, 0x60, 0x64, 0xae, 0xce,
	0xad, 0xe9, 0x08, 0x46, 0x46, 0x94, 0xe4, 0x09, 0x14, 0x71, 0xe6, 0xb8, 0x3a, 0x62, 0xe7, 0x8f,
	0x2c, 0x35, 0x24, 0x26, 0x94, 0x42, 0x86, 0xef, 0xbc, 0x99, 0xf2, 0x70, 0xfe, 0xc8, 0xd2, 0x63,
	0xc1, 0x60, 0x38, 0xc2, 0x99, 0x3a, 0x7f, 0xc1, 0x90, 0xc3, 0x93, 0x1a, 0x80, 0xac, 0xb9, 0x36,
	0x9f, 0x87, 0xd8, 0xfa, 0x56, 0xf7, 0x35, 0xe2, 0xfe, 0x14, 0x5d, 0xaa, 0xc3, 0x39, 0x4e, 0x42,
	0xd9, 0xbe, 0x0a, 0x4d, 0xa5, 0x63, 0xd2, 0x85, 0xfd, 0x10, 0x99, 0xcd, 0xd9, 0xdc, 0x4e, 0x2e,
	0xf3, 0xfc, 0xba, 0xcb, 0x7c, 0x37, 0x44, 0x76, 0xc3, 0xe6, 0x37, 0x0a, 0xdf, 0xfa, 0x73, 0x1e,
	0x60, 0x71, 0xd9, 0x91, 0xa7, 0x50, 0x73, 0x7c, 0x9f, 0x4e, 0x6d, 0xca, 0xbc, 0x91, 0x17, 0xe8,
	0x86, 0xd9, 0x90, 0xb6, 0xbe, 0x34, 0x09, 0x2d, 0x29, 0x88, 0xaa, 0x8f, 0x49, 0xef, 0xac, 0x78,
	0x6f, 0x94, 0x6d, 0x01, 0x4a, 0xea, 0x5e, 0x21, 0x03, 0xd2, 0xf5, 0x81, 0xfc, 0x14, 0xf6, 0x70,
	0x16, 0xd2, 0x08, 0x53, 0xd4, 0x8e, 0x44, 0xed, 0x2a, 0x6b, 0x02, 0xeb, 0x40, 0x79, 0xe2, 0xcc,
	0x6c, 0x67, 0xa4, 0xba, 0x99, 0x95, 0xbb, 0x2b, 0x4d, 0x9c, 0x59, 0x77, 0x24, 0x3a, 0xdb, 0x86,
	0xfa, 0xbe, 0xcb, 0x70, 0x88, 0x01, 0xf7, 0x1c, 0x3f, 0x69, 0xaa, 0x9b, 0xf7, 0xd8, 0x27, 0x94,
	0xfa, 0xbf, 0x16, 0x1a, 0xb3, 0xea, 0x92, 0x74, 0xba, 0xe0, 0xb4, 0xfe, 0x5d, 0x00, 0x72, 0xbf,
	0x23, 0x21, 0xaf, 0xa0, 0x38, 0x44, 0xdf, 0x99, 0xeb, 0x42, 0xf1, 0xf1, 0xe6, 0xcd, 0x4c, 0xbb,
	0x27, 0x78, 0x96, 0xa2, 0x0b, 0x3f, 0xce, 0x60, 0x91, 0xd3, 0xdb, 0xf8, 0xe9, 0x0a, 0x9e, 0xa5,
	0xe8, 0xcd, 0xbf, 0xe4, 0xa0, 0x28, 0x1d, 0x13, 0x13, 0xca, 0x21, 0x32, 0x17, 0x03, 0xae, 0xe5,
	0x92, 0x0c, 0xc9, 0x97, 0x60, 0xbc, 0xf3, 0x66, 0x38, 0xb4, 0xd5, 0xca, 0xd7, 0x29, 0xe5, 0xfc,
	0x91, 0x05, 0x12, 0xaf, 0xfc, 0x9e, 0x43, 0x43, 0x84, 0x25, 0x50, 0x07, 0xa3, 0x7d, 0x14, 0xd6,
	0xfb, 0xa8, 0x67, 0x58, 0xd2, 0xd3, 0x49, 0x03, 0xf6, 0xc5, 0x63, 0x49, 0xb9, 0x90, 0x8a, 0x6f,
	0xfe, 0x29, 0x07, 0x45, 0xb9, 0x9f, 0x15, 0xcb, 0x7f, 0x0a, 0x86, 0xa4, 0x45, 0xdc, 0xe1, 0x71,
	0xa4, 0xea, 0xab, 0x58, 0xa3, 0x30, 0x5e, 0x4b, 0x9b, 0x80, 0x8c, 0x58, 0xe8, 0x26, 0x90, 0x24,
	0xc9, 0x40, 0x18, 0x17, 0x10, 0x41, 0xe8, 0xd8, 0x28, 0x1b, 0xc9, 0x9d, 0x04, 0x22, 0x8d, 0x67,
	0xc2, 0x26, 0x92, 0x51, 0x4e, 0xaa, 0x64, 0x7c, 0x05, 0xb5, 0x6c, 0x41, 0x15, 0xc9, 0x1d, 0xc4,
	0x93, 0x01, 0x32, 0xb9, 0xbe, 0x5d, 0x91, 0xdc, 0x6a, 0x4c, 0x1e, 0xeb, 0x17, 0x56, 0x92, 0xf4,
	0x72, 0x74, 0x52, 0x52, 0x45, 0xbb, 0xf5, 0xf7, 0x3c, 0xd4, 0xef, 0x3e, 0xdb, 0xc8, 0x25, 0x54,
	0xfd, 0x41, 0xd2, 0x92, 0x0a, 0x7f, 0x7b, 0x9d, 0x4f, 0x36, 0x7d, 0xf3, 0xb5, 0x2f, 0x4e, 0x74,
	0x87, 0x5a, 0xf1, 0x07, 0x3a, 0x7d, 0xdf, 0xc2, 0xbe, 0x4b, 0x83, 0x40, 0x29, 0xc4, 0x0e, 0x29,
	0xf5, 0x75, 0x98, 0xdb, 0xcb, 0x1b, 0xdd, 0x04, 0x7e, 0x45, 0xa9, 0x9f, 0xbe, 0x27, 0xf7, 0xdc,
	0x0f, 0xec, 0xe2, 0x91, 0x4a, 0x63, 0xee, 0x7b, 0xc8, 0xec, 0x21, 0x72, 0x35, 0xa1, 0xa3, 0xbf,
	0xf4, 0xa5, 0xd5, 0x57, 0x84, 0x5e, 0x82, 0xb7, 0xea, 0xf4, 0x8e, 0xa5, 0xd5, 0x83, 0x4a, 0xb2,
	0x0b, 0x62, 0x40, 0xb9, 0x77, 0xf6, 0xaa, 0x7b, 0x7b, 0x71, 0x53, 0x7f, 0x44, 0xf6, 0xc1, 0xb0,
	0xfa, 0xb7, 0x97, 0x3d, 0xdb, 0xea, 0x9f, 0xbc, 0xbe, 0xac, 0xe7, 0xc8, 0x1e, 0xc0, 0xc5, 0x59,
	0xf7, 0xfa, 0xc6, 0x3e, 0xed, 0x5f, 0x5e, 0xd6, 0xf3, 0x04, 0xa0, 0x64, 0x75, 0x2f, 0x7b, 0xfd,
	0x37, 0xf5, 0x42, 0xeb, 0xfb, 0x22, 0x3c, 0x79, 0x78, 0x1f, 0xe4, 0x42, 0x3d, 0xc8, 0x55, 0x96,
	0x3e, 0xdb, 0xee, 0x10, 0xc4, 0x3b, 0x3d, 0x3d, 0x10, 0xf9, 0x54, 0xef, 0xeb, 0x7f, 0x05, 0xd4,
	0x99, 0x3e, 0xdf, 0xd2, 0x9d, 0xc8, 0xe1, 0xd4, 0x9f, 0x74, 0xd4, 0xfc, 0x3d, 0x18, 0x99, 0x8f,
	0x90, 0x9f, 0xc1, 0xbe, 0xa8, 0x74, 0x8b, 0xb3, 0x4f, 0x4a, 0xfe, 0xde, 0xc4, 0x99, 0x2d, 0xbc,
	0x46, 0xe4, 0x24, 0x8d, 0xf3, 0xe6, 0x85, 0x3f, 0x09, 0xa9, 0xae, 0xfc, 0xcd, 0x7f, 0xe4, 0xd5,
	0x65, 0x9a, 0x7e, 0xfd, 0x63, 0x78, 0x2c, 0xbe, 0x2e, 0x5e, 0x20, 0x5e, 0x30, 0xb2, 0x99, 0x6a,
	0xf8, 0x74, 0xa6, 0x59, 0x64, 0xe2, 0xcc, 0xae, 0xd4, 0x94, 0x6e, 0x05, 0x45, 0x32, 0xd5, 0x04,
	0x23, 0x45, 0x16, 0x24, 0xd2, 0x98, 0x38, 0xb3, 0x14, 0xf2, 0x25, 0xd4, 0x22, 0x1f, 0x31, 0xb4,
	0xa7, 0x5e, 0x30, 0xa4, 0x53, 0xdd, 0x40, 0xaf, 0x58, 0xa6, 0x21, 0xe1, 0x6f, 0x25, 0x5a, 0x34,
	0x48, 0x2e, 0x0d, 0x22, 0x74, 0x63, 0xee, 0xbd, 0x47, 0x95, 0xb3, 0x91, 0xbc, 0x05, 0x8a, 0x56,
	0x23, 0x33, 0x23, 0x13, 0x37, 0x22, 0xe7, 0xa2, 0x9f, 0xd2, 0xda, 0xb2, 0xbd, 0x80, 0x23, 0x7b,
	0xef, 0xf8, 0xeb, 0xdf, 0xb7, 0x8d, 0x94, 0xf4, 0x5a, 0x73, 0xc8, 0x0b, 0xf8, 0x61, 0x76, 0x67,
	0xb6, 0xb8, 0x66, 0x17, 0x61, 0x91, 0xaf, 0xdf, 0xa2, 0x65, 0x66, 0x36, 0x7a, 0x85, 0x6c, 0x11,
	0xa0, 0xd6, 0xdf, 0xf2, 0x50, 0xbf, 0x2b, 0x7f, 0xf2, 0x5a, 0xab, 0x47, 0x89, 0xf1, 0x78, 0xd3,
	0xb4, 0x79, 0x48, 0x37, 0xff, 0xca, 0xdd, 0x89, 0xdd, 0xc3, 0x07, 0x95, 0x5b, 0x76, 0x50, 0xc7,
	0x50, 0x49, 0x8f, 0x67, 0xad, 0x70, 0x52, 0x28, 0xf9, 0x06, 0xc8, 0xc0, 0x89, 0xd0, 0x46, 0x7d,
	0x07, 0x49, 0xf1, 0xad, 0xbd, 0x04, 0xac, 0xba, 0x20, 0x9d, 0x69, 0x8e, 0x90, 0x5f, 0x22, 0xb5,
	0xd4, 0x4f, 0x52, 0xf2, 0x77, 0x52, 0xa9, 0x25, 0xf0, 0x2b, 0x35, 0x33, 0x28, 0x49, 0xb7, 0x9f,
	0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0x0b, 0xc9, 0xdc, 0xb4, 0x54, 0x14, 0x00, 0x00,
}
