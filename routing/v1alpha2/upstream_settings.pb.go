// Code generated by protoc-gen-go. DO NOT EDIT.
// source: routing/v1alpha2/upstream_settings.proto

package istio_routing_v1alpha2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Load balancing algorithm to use when forwarding traffic. These
// settings directly correlate to [load balancer
// types](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/load_balancing)
// supported by Envoy.
type UpstreamSettings_LBPolicy int32

const (
	// Default load balancing algorithm is random load balancing.
	UpstreamSettings_DEFAULT UpstreamSettings_LBPolicy = 0
	// Simple round robin policy.
	UpstreamSettings_ROUND_ROBIN UpstreamSettings_LBPolicy = 1
	// The least request load balancer uses an O(1) algorithm which selects
	// two random healthy hosts and picks the host which has fewer active
	// requests.
	UpstreamSettings_LEAST_CONN UpstreamSettings_LBPolicy = 2
	// The random load balancer selects a random healthy host. The random
	// load balancer generally performs better than round robin if no health
	// checking policy is configured.
	UpstreamSettings_RANDOM UpstreamSettings_LBPolicy = 3
)

var UpstreamSettings_LBPolicy_name = map[int32]string{
	0: "DEFAULT",
	1: "ROUND_ROBIN",
	2: "LEAST_CONN",
	3: "RANDOM",
}
var UpstreamSettings_LBPolicy_value = map[string]int32{
	"DEFAULT":     0,
	"ROUND_ROBIN": 1,
	"LEAST_CONN":  2,
	"RANDOM":      3,
}

func (x UpstreamSettings_LBPolicy) String() string {
	return proto.EnumName(UpstreamSettings_LBPolicy_name, int32(x))
}
func (UpstreamSettings_LBPolicy) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

// UpstreamSettings defines client/caller-side policies that determine how
// to handle traffic bound to a particular destination. The settings
// specify configuration for load balancing, connection pool size from
// the sidecar, and outlier detection settings to detect and evict
// unhealthy hosts from the load balancing pool. For example, a simple load
// balancing policy for the ratings service would look as follows:
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: UpstreamSettings
//     metadata:
//       name: bookinfo-upstream
//     spec:
//       destination:
//         name: myredissrv
//       lbPolicy: LEAST_CONN
//
// UpstreamSettings can be inherited based on scope. By omitting the
// destination in an upstream setting (equivalent to a wildcard), the
// configuration can be applied to all clients in the mesh. The following
// rule sets a 100ms connection timeout for client connections to any
// service (HTTP/TCP) in the mesh.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: UpstreamSettings
//     metadata:
//       name: bookinfo-common-timeout
//     spec:
//       connectionPool:
//         tcp:
//           connectTimeout: 100ms
//
// UpstreamSettings can be applied at service granularity. The setting will
// be applied to connections bound for any instance of the service,
// irrespective of the version. For example, the following rule sets a
// maximum of 100 requests to the reviews service:
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: UpstreamSettings
//     metadata:
//       name: bookinfo-reviews
//     spec:
//       destination:
//         name: reviews
//       connectionPool:
//         http:
//           maxRequests: 100
//
// Version specific UpstreamSettings inherit settings from rules defined
// for the entire service, and can override individual settings as
// desired. For example, the following rule overrides the default
// maxRequests (100) for reviews for a specific version of the reviews service.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: UpstreamSettings
//     metadata:
//       name: bookinfo-reviews
//     spec:
//       destination:
//         name: reviews
//         labels:
//           env: dev
//           version: poc
//       connectionPool:
//         http:
//           maxRequests: 50
//
type UpstreamSettings struct {
	// The service associated with this configuration. If omitted, the
	// settings will be applied at the client side to all services in the
	// mesh. The upstream settings can be applied to all versions of a
	// service by omitting the labels field in the destination.
	Destination *Destination `protobuf:"bytes,1,opt,name=destination" json:"destination,omitempty"`
	// Upstream load balancing policy
	LbPolicy UpstreamSettings_LBPolicy `protobuf:"varint,2,opt,name=lb_policy,json=lbPolicy,enum=istio.routing.v1alpha2.UpstreamSettings_LBPolicy" json:"lb_policy,omitempty"`
	// Settings controlling the volume of connections to an upstream service
	ConnectionPool *ConnectionPoolSettings `protobuf:"bytes,3,opt,name=connection_pool,json=connectionPool" json:"connection_pool,omitempty"`
	// Settings controlling eviction of unhealthy hosts from the load balancing pool
	OutlierDetection *OutlierDetection `protobuf:"bytes,4,opt,name=outlier_detection,json=outlierDetection" json:"outlier_detection,omitempty"`
}

func (m *UpstreamSettings) Reset()                    { *m = UpstreamSettings{} }
func (m *UpstreamSettings) String() string            { return proto.CompactTextString(m) }
func (*UpstreamSettings) ProtoMessage()               {}
func (*UpstreamSettings) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *UpstreamSettings) GetDestination() *Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *UpstreamSettings) GetLbPolicy() UpstreamSettings_LBPolicy {
	if m != nil {
		return m.LbPolicy
	}
	return UpstreamSettings_DEFAULT
}

func (m *UpstreamSettings) GetConnectionPool() *ConnectionPoolSettings {
	if m != nil {
		return m.ConnectionPool
	}
	return nil
}

func (m *UpstreamSettings) GetOutlierDetection() *OutlierDetection {
	if m != nil {
		return m.OutlierDetection
	}
	return nil
}

// Connection pool settings for an upstream host. The settings apply to
// each individual host in the upstream service.  See Envoy's [circuit
// breaker](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/circuit_breaking)
// for more details. Connection pool settings can be applied at the TCP
// level as well as at HTTP level.
//
// For example, the following rule sets a limit of 100 connections to redis
// service called myredissrv with a connect timeout of 30ms
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: UpstreamSettings
//     metadata:
//       name: bookinfo-redis
//     spec:
//       destination:
//         name: myredissrv
//       connectionPool:
//         tcp:
//           maxConnections: 100
//           connectTimeout: 30ms
//
type ConnectionPoolSettings struct {
	// Settings common to both HTTP and TCP upstream connections.
	Tcp *ConnectionPoolSettings_TCPSettings `protobuf:"bytes,1,opt,name=tcp" json:"tcp,omitempty"`
	// HTTP connection pool settings.
	Http *ConnectionPoolSettings_HTTPSettings `protobuf:"bytes,2,opt,name=http" json:"http,omitempty"`
}

func (m *ConnectionPoolSettings) Reset()                    { *m = ConnectionPoolSettings{} }
func (m *ConnectionPoolSettings) String() string            { return proto.CompactTextString(m) }
func (*ConnectionPoolSettings) ProtoMessage()               {}
func (*ConnectionPoolSettings) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *ConnectionPoolSettings) GetTcp() *ConnectionPoolSettings_TCPSettings {
	if m != nil {
		return m.Tcp
	}
	return nil
}

func (m *ConnectionPoolSettings) GetHttp() *ConnectionPoolSettings_HTTPSettings {
	if m != nil {
		return m.Http
	}
	return nil
}

// Settings common to both HTTP and TCP upstream connections.
type ConnectionPoolSettings_TCPSettings struct {
	// Maximum number of HTTP/TCP connections to a destination host.
	MaxConnections int32 `protobuf:"varint,1,opt,name=max_connections,json=maxConnections" json:"max_connections,omitempty"`
	// TCP connection timeout.
	ConnectTimeout *google_protobuf.Duration `protobuf:"bytes,2,opt,name=connect_timeout,json=connectTimeout" json:"connect_timeout,omitempty"`
}

func (m *ConnectionPoolSettings_TCPSettings) Reset()         { *m = ConnectionPoolSettings_TCPSettings{} }
func (m *ConnectionPoolSettings_TCPSettings) String() string { return proto.CompactTextString(m) }
func (*ConnectionPoolSettings_TCPSettings) ProtoMessage()    {}
func (*ConnectionPoolSettings_TCPSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{1, 0}
}

func (m *ConnectionPoolSettings_TCPSettings) GetMaxConnections() int32 {
	if m != nil {
		return m.MaxConnections
	}
	return 0
}

func (m *ConnectionPoolSettings_TCPSettings) GetConnectTimeout() *google_protobuf.Duration {
	if m != nil {
		return m.ConnectTimeout
	}
	return nil
}

// Settings applicable to HTTP1.1/HTTP2/GRPC connections.
type ConnectionPoolSettings_HTTPSettings struct {
	// Maximum number of pending HTTP requests to a destination. Default 1024.
	MaxPendingRequests int32 `protobuf:"varint,1,opt,name=max_pending_requests,json=maxPendingRequests" json:"max_pending_requests,omitempty"`
	// Maximum number of requests to a backend. Default 1024.
	MaxRequests int32 `protobuf:"varint,2,opt,name=max_requests,json=maxRequests" json:"max_requests,omitempty"`
	// Maximum number of requests per connection to a backend. Setting this
	// parameter to 1 disables keep alive.
	MaxRequestsPerConnection int32 `protobuf:"varint,3,opt,name=max_requests_per_connection,json=maxRequestsPerConnection" json:"max_requests_per_connection,omitempty"`
}

func (m *ConnectionPoolSettings_HTTPSettings) Reset()         { *m = ConnectionPoolSettings_HTTPSettings{} }
func (m *ConnectionPoolSettings_HTTPSettings) String() string { return proto.CompactTextString(m) }
func (*ConnectionPoolSettings_HTTPSettings) ProtoMessage()    {}
func (*ConnectionPoolSettings_HTTPSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{1, 1}
}

func (m *ConnectionPoolSettings_HTTPSettings) GetMaxPendingRequests() int32 {
	if m != nil {
		return m.MaxPendingRequests
	}
	return 0
}

func (m *ConnectionPoolSettings_HTTPSettings) GetMaxRequests() int32 {
	if m != nil {
		return m.MaxRequests
	}
	return 0
}

func (m *ConnectionPoolSettings_HTTPSettings) GetMaxRequestsPerConnection() int32 {
	if m != nil {
		return m.MaxRequestsPerConnection
	}
	return 0
}

// A Circuit breaker implementation that tracks the status of each
// individual host in the upstream service.  While currently applicable to
// only HTTP services, future versions will support opaque TCP services as
// well. For HTTP services, hosts that continually return errors for API
// calls are ejected from the pool for a pre-defined period of time. See
// Envoy's [outlier
// detection](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/outlier)
// for more details.
//
// The following rule sets a connection pool size of 100 connections and
// 1000 concurrent requests, with no more than 10 req/connection to
// "reviews" service. In addition, it configures upstream hosts to be
// scanned every 5 mins, such that any host that fails 7 consecutive times
// with 5XX error code will be ejected for 15 minutes.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: UpstreamSettings
//     metadata:
//       name: reviews-cb-policy
//     spec:
//       destination:
//         name: reviews
//       connectionPool:
//         tcp:
//           maxConnections: 100
//         http:
//           maxRequests: 1000
//           maxRequestsPerConnection: 10
//       outlierDetection:
//         http:
//           consecutiveErrors: 7
//           interval: 5m
//           baseEjectionTime: 15m
//
type OutlierDetection struct {
	// Settings for HTTP1.1/HTTP2/GRPC connections.
	Http *OutlierDetection_HTTPSettings `protobuf:"bytes,1,opt,name=http" json:"http,omitempty"`
}

func (m *OutlierDetection) Reset()                    { *m = OutlierDetection{} }
func (m *OutlierDetection) String() string            { return proto.CompactTextString(m) }
func (*OutlierDetection) ProtoMessage()               {}
func (*OutlierDetection) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *OutlierDetection) GetHttp() *OutlierDetection_HTTPSettings {
	if m != nil {
		return m.Http
	}
	return nil
}

// Outlier detection settings for HTTP1.1/HTTP2/GRPC connections.
type OutlierDetection_HTTPSettings struct {
	// Number of 5XX errors before a host is ejected from the connection
	// pool. Defaults to 5.
	ConsecutiveErrors int32 `protobuf:"varint,1,opt,name=consecutive_errors,json=consecutiveErrors" json:"consecutive_errors,omitempty"`
	// Time interval between ejection sweep analysis. format:
	// 1h/1m/1s/1ms. MUST BE >=1ms. Default is 10s.
	Interval *google_protobuf.Duration `protobuf:"bytes,2,opt,name=interval" json:"interval,omitempty"`
	// Minimum ejection duration. A host will remain ejected for a period
	// equal to the product of minimum ejection duration and the number of
	// times the host has been ejected. This technique allows the system to
	// automatically increase the ejection period for unhealthy upstream
	// servers. format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is 30s.
	BaseEjectionTime *google_protobuf.Duration `protobuf:"bytes,3,opt,name=base_ejection_time,json=baseEjectionTime" json:"base_ejection_time,omitempty"`
	// Maximum % of hosts in the load balancing pool for the upstream
	// service that can be ejected. Defaults to 10%.
	MaxEjectionPercent int32 `protobuf:"varint,4,opt,name=max_ejection_percent,json=maxEjectionPercent" json:"max_ejection_percent,omitempty"`
}

func (m *OutlierDetection_HTTPSettings) Reset()         { *m = OutlierDetection_HTTPSettings{} }
func (m *OutlierDetection_HTTPSettings) String() string { return proto.CompactTextString(m) }
func (*OutlierDetection_HTTPSettings) ProtoMessage()    {}
func (*OutlierDetection_HTTPSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{2, 0}
}

func (m *OutlierDetection_HTTPSettings) GetConsecutiveErrors() int32 {
	if m != nil {
		return m.ConsecutiveErrors
	}
	return 0
}

func (m *OutlierDetection_HTTPSettings) GetInterval() *google_protobuf.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *OutlierDetection_HTTPSettings) GetBaseEjectionTime() *google_protobuf.Duration {
	if m != nil {
		return m.BaseEjectionTime
	}
	return nil
}

func (m *OutlierDetection_HTTPSettings) GetMaxEjectionPercent() int32 {
	if m != nil {
		return m.MaxEjectionPercent
	}
	return 0
}

func init() {
	proto.RegisterType((*UpstreamSettings)(nil), "istio.routing.v1alpha2.UpstreamSettings")
	proto.RegisterType((*ConnectionPoolSettings)(nil), "istio.routing.v1alpha2.ConnectionPoolSettings")
	proto.RegisterType((*ConnectionPoolSettings_TCPSettings)(nil), "istio.routing.v1alpha2.ConnectionPoolSettings.TCPSettings")
	proto.RegisterType((*ConnectionPoolSettings_HTTPSettings)(nil), "istio.routing.v1alpha2.ConnectionPoolSettings.HTTPSettings")
	proto.RegisterType((*OutlierDetection)(nil), "istio.routing.v1alpha2.OutlierDetection")
	proto.RegisterType((*OutlierDetection_HTTPSettings)(nil), "istio.routing.v1alpha2.OutlierDetection.HTTPSettings")
	proto.RegisterEnum("istio.routing.v1alpha2.UpstreamSettings_LBPolicy", UpstreamSettings_LBPolicy_name, UpstreamSettings_LBPolicy_value)
}

func init() { proto.RegisterFile("routing/v1alpha2/upstream_settings.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 601 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x25, 0x49, 0x5b, 0xca, 0xb8, 0x4a, 0xdd, 0x15, 0xaa, 0x42, 0x90, 0x50, 0x1b, 0x0e, 0xe4,
	0x82, 0x43, 0x83, 0x7a, 0x01, 0x71, 0x68, 0xeb, 0x00, 0x95, 0x82, 0x6d, 0xb9, 0x8e, 0x38, 0xae,
	0x1c, 0x67, 0x48, 0x8d, 0x6c, 0xaf, 0x59, 0xaf, 0xab, 0xc0, 0x9f, 0x41, 0xe2, 0x0f, 0x71, 0xe5,
	0x5f, 0xf0, 0x17, 0x90, 0xd7, 0x1f, 0x31, 0x21, 0x01, 0x7a, 0xb3, 0x3c, 0xef, 0xbd, 0x79, 0x33,
	0x6f, 0x16, 0xfa, 0x9c, 0xa5, 0xc2, 0x8f, 0xe6, 0x83, 0x9b, 0x13, 0x37, 0x88, 0xaf, 0xdd, 0xe1,
	0x20, 0x8d, 0x13, 0xc1, 0xd1, 0x0d, 0x69, 0x82, 0x22, 0xab, 0x24, 0x5a, 0xcc, 0x99, 0x60, 0xe4,
	0xd0, 0x4f, 0x84, 0xcf, 0xb4, 0x02, 0xaf, 0x95, 0xf8, 0xee, 0xa3, 0x39, 0x63, 0xf3, 0x00, 0x07,
	0x12, 0x35, 0x4d, 0x3f, 0x0c, 0x66, 0x29, 0x77, 0x85, 0xcf, 0xa2, 0x9c, 0xd7, 0x3d, 0xfe, 0xa3,
	0x43, 0xf6, 0x03, 0x29, 0x4f, 0x03, 0xcc, 0x21, 0xbd, 0xaf, 0x2d, 0x50, 0x27, 0x45, 0xdb, 0xab,
	0xa2, 0x2b, 0x19, 0x81, 0x32, 0xc3, 0x44, 0xf8, 0x91, 0x14, 0xeb, 0x34, 0x8e, 0x1a, 0x7d, 0x65,
	0xf8, 0x58, 0x5b, 0xef, 0x42, 0xd3, 0x97, 0x50, 0xbb, 0xce, 0x23, 0x06, 0xdc, 0x0b, 0xa6, 0x34,
	0x66, 0x81, 0xef, 0x7d, 0xee, 0x34, 0x8f, 0x1a, 0xfd, 0xf6, 0xf0, 0x64, 0x93, 0xc8, 0xaa, 0x07,
	0x6d, 0x7c, 0x6e, 0x49, 0xa2, 0xbd, 0x1b, 0x4c, 0xf3, 0x2f, 0xf2, 0x1e, 0xf6, 0x3d, 0x16, 0x45,
	0xe8, 0x65, 0xea, 0x34, 0x66, 0x2c, 0xe8, 0xb4, 0xa4, 0x35, 0x6d, 0x93, 0xea, 0x45, 0x05, 0xb7,
	0x18, 0x0b, 0x4a, 0x6d, 0xbb, 0xed, 0xfd, 0xf6, 0x9f, 0x4c, 0xe0, 0x80, 0xa5, 0x22, 0xf0, 0x91,
	0xd3, 0x19, 0x8a, 0xbc, 0xd0, 0xd9, 0x92, 0xd2, 0xfd, 0x4d, 0xd2, 0x66, 0x4e, 0xd0, 0x4b, 0xbc,
	0xad, 0xb2, 0x95, 0x3f, 0x3d, 0x1d, 0x76, 0xcb, 0x29, 0x88, 0x02, 0x77, 0xf5, 0xd1, 0xeb, 0xb3,
	0xc9, 0xd8, 0x51, 0xef, 0x90, 0x7d, 0x50, 0x6c, 0x73, 0x62, 0xe8, 0xd4, 0x36, 0xcf, 0x2f, 0x0d,
	0xb5, 0x41, 0xda, 0x00, 0xe3, 0xd1, 0xd9, 0x95, 0x43, 0x2f, 0x4c, 0xc3, 0x50, 0x9b, 0x04, 0x60,
	0xc7, 0x3e, 0x33, 0x74, 0xf3, 0x9d, 0xda, 0xea, 0xfd, 0x68, 0xc1, 0xe1, 0xfa, 0x39, 0xc8, 0x18,
	0x5a, 0xc2, 0x8b, 0x8b, 0x7c, 0x5e, 0xdc, 0x6e, 0x09, 0x9a, 0x73, 0x61, 0x55, 0x0b, 0xc9, 0x64,
	0x88, 0x09, 0x5b, 0xd7, 0x42, 0xc4, 0x32, 0x29, 0x65, 0xf8, 0xf2, 0x96, 0x72, 0x6f, 0x1d, 0x67,
	0xa9, 0x27, 0x85, 0xba, 0x5f, 0x40, 0xa9, 0x35, 0x21, 0x4f, 0x60, 0x3f, 0x74, 0x17, 0x74, 0xb9,
	0xfb, 0x44, 0x3a, 0xdf, 0xb6, 0xdb, 0xa1, 0xbb, 0x58, 0xaa, 0x26, 0xe4, 0xbc, 0xca, 0x99, 0x0a,
	0x3f, 0x44, 0x96, 0x8a, 0xc2, 0xd3, 0x03, 0x2d, 0x3f, 0x78, 0xad, 0x3c, 0x78, 0x4d, 0x2f, 0x0e,
	0xbe, 0x8a, 0xd4, 0xc9, 0x09, 0xdd, 0x6f, 0x0d, 0xd8, 0xab, 0x5b, 0x22, 0xcf, 0xe0, 0x7e, 0xd6,
	0x3d, 0xc6, 0x68, 0xe6, 0x47, 0x73, 0xca, 0xf1, 0x53, 0x8a, 0x89, 0x28, 0x2d, 0x90, 0xd0, 0x5d,
	0x58, 0x79, 0xc9, 0x2e, 0x2a, 0xe4, 0x18, 0xf6, 0x32, 0x46, 0x85, 0x6c, 0x4a, 0xa4, 0x12, 0xba,
	0x8b, 0x0a, 0xf2, 0x0a, 0x1e, 0xd6, 0x21, 0x34, 0x46, 0x5e, 0x9b, 0x4f, 0x5e, 0xe7, 0xb6, 0xdd,
	0xa9, 0x31, 0x2c, 0xe4, 0xcb, 0x49, 0x7b, 0xdf, 0x9b, 0xa0, 0xae, 0xde, 0x11, 0xb9, 0x2c, 0x62,
	0xc8, 0x53, 0x3d, 0xfd, 0xdf, 0xfb, 0x5b, 0x17, 0xc0, 0xcf, 0xd5, 0x25, 0x3c, 0x05, 0xe2, 0xb1,
	0x28, 0x41, 0x2f, 0x15, 0xfe, 0x0d, 0x52, 0xe4, 0x9c, 0xf1, 0x72, 0x05, 0x07, 0xb5, 0xca, 0x48,
	0x16, 0xc8, 0x29, 0xec, 0xfa, 0x91, 0x40, 0x7e, 0xe3, 0x06, 0xff, 0x4e, 0xa0, 0x82, 0x92, 0x37,
	0x40, 0xa6, 0x6e, 0x82, 0x14, 0x3f, 0x16, 0x4f, 0x35, 0x4b, 0xb1, 0x78, 0xaa, 0x7f, 0x11, 0x50,
	0x33, 0xd2, 0xa8, 0xe0, 0x64, 0x39, 0x96, 0x99, 0x55, 0x3a, 0x31, 0x72, 0x0f, 0x23, 0x21, 0x9f,
	0x66, 0x9e, 0x59, 0x09, 0xb7, 0xf2, 0xca, 0x74, 0x47, 0xca, 0x3e, 0xff, 0x15, 0x00, 0x00, 0xff,
	0xff, 0x2e, 0x81, 0xed, 0xb2, 0x5c, 0x05, 0x00, 0x00,
}
