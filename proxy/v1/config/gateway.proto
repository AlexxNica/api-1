// Copyright 2017 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

package istio.proxy.v1.config;

// Gateway describes a load balancer operating at the edge of the mesh
// receiving incoming HTTP/TCP connections. The specification describes a
// set of ports that should be exposed outside the mesh, the type of
// protocol to use, SNI configuration for the load balancer, etc.
//
// For example, the following gateway spec sets up Envoy to act as a load
// balancer exposing port 80 and 9080 (http), 443 (https), and port 2379 (TCP).
// While Istio will configure Envoy to listen on these ports, it is the
// responsibility of the user to ensure that external traffic to these
// ports are allowed into the mesh.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: Gateway
//     metadata:
//       name: my-gateway
//     spec:
//       servers:
//         http:
//           - port:
//               number: 80
//               name: http
//             domains:
//               - uk.bookinfo.com
//               - eu.bookinfo.com
//             tls:
//               httpsRedirect: true # sends 302 redirect for http requests
//           - port:
//               number: 443
//               name: https
//             tls:
//               mode: simple #enables HTTPS on this port
//             domains:
//               - uk.bookinfo.com
//               - eu.bookinfo.com
//           - port:
//               number: 9080
//               name: http-wildcard
//             # no domains implies wildcard match
//         tcp:
//           - port:
//               number: 2379 #to expose internal service via external port 2379
//               name: redis
//               protocol: REDIS
//       certs:
//       - domains:
//           - *.bookinfo.com
//         serverCert: server.crt
//         clientCABundle: client.ca-bundle
//
// The following route rule splits traffic for
// https://uk.bookinfo.com/reviews, https://eu.bookinfo.com/reviews,
// http://uk.bookinfo.com:9080/reviews, http://eu.bookinfo.com:9080/reviews
// into two versions (prod and qa) of an internal reviews service on port
// 9080. In addition, requests containing the cookie user: dev-123 will be
// sent to special port 7777 in the qa version. The same rule is also
// applicable inside the mesh for requests to the reviews.prod
// service. This rule is applicable across ports 443, 9080. Note that
// http://uk.bookinfo.com gets redirected to https://uk.bookinfo.com
// (i.e. 80 redirects to 443).
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: RouteRule
//     metadata:
//       name: bookinfo-rule
//     spec:
//       destination:
//         name: reviews.prod
//         domains:
//           - uk.bookinfo.com
//           - eu.bookinfo.com
//       gateway:
//         - my-gateway #apply at my-gateway as well as reviews.prod internally
//       http:
//         - match:
//             request:
//               headers:
//                 cookie:
//                   user: dev-123
//           route:
//           - destination:
//               port:
//                 number: 7777
//               name: reviews.qa
//         - match:
//             request:
//               headers:
//                 uri:
//                   prefix: /reviews/
//           route:
//           - destination:
//               port:
//                 number: 9080 # port can be omitted if its the only port for reviews
//               name: reviews.prod # can be omitted if its same as root destination.name
//             weight: 80
//           - destination:
//               name: reviews.qa
//             weight: 20
//
// The following routing rule forwards traffic arriving at (external)
// port 2379 from 172.17.16.* subnet to internal redis server on port 5555.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: RouteRule
//     metadata:
//       name: bookinfo-redis
//     spec:
//       destination:
//         port:
//           name: redis #only applies to ports named redis
//       gateway:
//         - my-gateway
//       tcp:
//         match:
//           tcp:
//             sourceSubnet:
//               - "172.17.16.0/24"
//         route:
//         - destination:
//             name: redis.prod
//
// By default, if there is no wildcard, HTTP requests for unknown domains
// or requests that have no matching route rule will respond with a
// 404. If a specific default behavior is desired at the ingress, add a
// route rule without any destination (implies wildcard) with the desired
// backend. For example, the following wildcard routing rule is applicable for
// port 9080
//
//     metadata:
//       name: default-ingress
//     spec:
//       destination:
//         port:
//           number: 9080
//       gateway:
//         - my-gateway #applies to 
//       http:
//         route:
//         - destination:
//             name: homepage.prod
//
message Gateway {
  // REQUIRED: Details about the port on which the proxy listens and applies rules
  repeated Server servers = 1;

  // Optional names of certificates for the server and the CA bundle to be used to validate
  // the client's certificate (if mTLS is to be used).
  repeated TLSConfig certs = 2;
}

// Server describes the properties of the proxy on a given load balancer port.
// For example,
//     metadata:
//       name: my-ingress
//     spec:
//       servers:
//       - port:
//           number: 80
//           protocol: HTTP2
//
// Another example
//     metadata:
//       name: my-tcp-ingress
//     spec:
//       servers:
//       - port:
//           number: 2379
//           protocol: redis
//
message Server {
  // Port describes the properties of a specific port of a service.
  message Port {
    // A valid non-negative integer port number.
    int32 number = 1;

    // The protocol to communicate with the external services.
    // MUST BE one of HTTP|HTTPS|GRPC|HTTP2|MONGO|REDIS|TCP.
    string protocol = 2;

    // Name assigned to the port.
    string name = 3;
  }

  // REQUIRED: The Port on which Envoy should listen for incoming
  // connections
  Port port = 1;

  // A list of domains exposed by this gateway. While
  // typically applicable to HTTP services, it can also be used for TCP
  // services using TLS with SNI. Standard DNS wildcard prefix syntax
  // is permitted.
  //
  // RouteRules that are bound to a gateway must having a matching domain
  // in their default destination. Specifically one of the route rule
  // destination domains is a strict suffix of a gateway domain or
  // a gateway domain is a suffix of one of the route rule domains.
  repeated string domains = 2;

  message TLSOptions {
    // If set to true, the load balancer will send a 302 redirect for all
    // http connections, asking the clients to use HTTPS.
    bool https_redirect = 1;

    // TLS modes enforced by Envoy
    enum TLSmode {
      // If set to "passthrough", Envoy will forward the connection to the
      // upstream server as is.
      PASSTHROUGH = 0;

      // If set to "simple", Envoy will secure connections with
      // standard TLS semantics (server certs only).
      SIMPLE = 1;

      // If set to "mutual", Envoy will validate client's identity using
      // mTLS authentication.
      MUTUAL = 2;
    };

    // Optional: Indicates whether connections to this port should be
    // secured using TLS.  The value of this field determines how TLS is
    // enforced.  
    TLSmode mode = 2;
  }

  // Set of TLS related options that govern the server's behavior. Use
  // these options to control if all http requests should be redirected to
  // https, and the TLS modes to use.
  TLSOptions tls = 3;
}

// TLSConfig describes the server-side TLS certificate and CA cert (for
// client authentication) for a particular domain exposed by the ingress load
// balancer. These domains are not resolved in any way. Its upto the end user
// to ensure that the DNS resolves these domains to the ingress load balancer
//
// For example, the following is an example of TLS configuration for port 443
//     metadata:
//       name: my-ingress
//       namespace: mynamespace
//     spec:
//       servers:
//       - port:
//           number: 443
//           protocol: HTTP
//         tls:
//           mode: simple
//       certs:
//       - domains:
//           - foo.bar.com
//         serverCertificatet: server.crt
//         clientCABundle: client.ca-bundle
//       - domains:
//           - example.com
//         serverCertificate: server.crt
//
message TLSConfig {
  // REQUIRED: A set of hostnames associated with the server
  // certificate. For wildcard hostname, use *
  repeated string domains = 1;

  // REQUIRED: The name of the file holding the server-side TLS certificate
  // to use.  It is the responsibility of the underlying platform to mount
  // the certificate as a file under /etc/istio/ingress-certs with the same
  // name as the specified in this field.
  string server_certificate = 2;

  // To use mutual TLS for external clients, specify the name of the file
  // holding the CA certificate to validate the client's certificate. It is
  // the responsibility of the underlying platform to mount the certificate
  // as a file under /etc/istio/ingress-certs with the same name as
  // specified in this field.
  string client_ca_bundle = 3;
}
