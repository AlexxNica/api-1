// Copyright 2017 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

import "proxy/v1/config/route_rule.proto";

package istio.proxy.v1.config;

// INTERNAL USE ONLY. Map from K8S ingress into a partial Istio rule
// which is then used to map into actual route rules. This is an incomplete
// implementation. Bare minimal Kubernetes ingress specifications are supported.
message K8SIngressRule {
  // REQUIRED: Port on which the ingress proxy listens and applies the rule.
  int32 port = 1;

  // Optional TLS secret path to apply server-side TLS context on the port.
  // It is up to the underlying secret store to interpret the path to the secret.
  string tls_secret = 2;

  // RECOMMENDED. Precedence is used to disambiguate the order of application
  // of rules. A higher number takes priority. If not specified, the value is
  // assumed to be 0.  The order of application for rules with the same
  // precedence is unspecified.
  int32 precedence = 3;

  // Match conditions to be satisfied for the ingress rule to be
  // activated.
  MatchCondition match = 4;

  // REQUIRED: Destination uniquely identifies the destination service.
  //
  // *Note:* The ingress rule destination specification represents all version
  // of the service and therefore the IstioService's labels field MUST be empty.
  //
  IstioService destination = 5;

  // REQUIRED: Destination port identifies a port on the destination service for routing.
  oneof destination_service_port {
    // Identifies the destination service port by value
    int32 destination_port = 6;

    // Identifies the destination service port by name
    string destination_port_name = 7;
  }
}

// Gateway describes a load balancer operating at the
// edge of the mesh receiving incoming HTTP/TCP connections. The specification
// describes a set of ports that should be exposed outside the mesh, the type
// of protocol to use, SNI configuration for the load balancer, etc.
//
// For example, the following gateway spec sets up Envoy to act as a
// load balancer exposing port 80 (http), 443 (https), and port 2379 (TCP).
// While Istio will configure Envoy to listen on these ports, it is the responsibility
// of the user to ensure that external traffic to these ports are allowed into the
// mesh.
//
//     metadata:
//       name: my-gateway
//     spec:
//       servers:
//       - port: 80
//         protocol: HTTP
//         authorities:
//           - uk.bookinfo.com
//           - eu.bookinfo.com
//           - * #default
//         tls:
//           httpsRedirect: true # sends 302 redirect for http requests
//       - port: 443
//         protocol: HTTP
//         tls:
//           mode: simple #enables HTTPS on this port
//         authorities:
//           - uk.bookinfo.com
//           - eu.bookinfo.com
//           - *
//       - port: 2379 #to expose internal service via external port 2379
//         protocol: TCP
//         tls:
//           mode: mtls
//         authorities:
//           - redis.bookinfo.com
//         tcpBackend:
//           name: myRedis #service name
//           port: 1234
//       certs:
//       - authorities:
//           - *.bookinfo.com
//         serverCert: server.crt
//         clientCABundle: client.ca-bundle
//
// The following routing rule exposes uk.bookinfo.com, eu.bookinfo.com via the gateway
// and routes all calls to /reviews to the reviews service. Since a port
// list is missing, this rule will apply to all http ports of the reviews service.
//
//     metadata:
//       name: bookinfo-rule
//     spec:
//       destination:
//         fqdn:
//           - uk.bookinfo.com
//           - eu.bookinfo.com
//       match:
//         request:
//           headers:
//             uri:
//               prefix: /reviews/
//       route:
//       - destination:
//           name: reviews
//           domain: prod.svc.cluster.local
//         weight: 80
//       - destination:
//           name: reviews
//           domain: qa.svc.cluster.local
//         weight: 20
//
// By default, if there is no wildcard, requests for unknown authorities
// will be responded with a 404. When some default behavior is desired, add
// a default host (*) to the load balancer specification and specify its
// behavior with an appropriate route rule. For example,
//
//     metadata:
//       name: default-ingress
//     spec:
//       destination:
//         fqdn:
//           - *
//       route:
//       - destination:
//           name: homepage
//
// Note that the routing rules above will be applicable inside the service
// mesh as well, to all services invoking the reviews API via the HTTP host
// uk.bookinfo.com, and eu.bookinfo.com. In addition, the wildcard rule
// above will force all internal services to go to the homepage service. In
// order to restrict the wildcard routing rule above to be applicable only
// at the Ingress load balancer, use the source match option such that the
// rule will be applicable only to instances belonging to the load
// balancer.
//
// For example, let us assume that the ingress pods/VMs have a label called
// role: ingress
//
//     metadata:
//       name: default-ingress
//     spec:
//       destination:
//         fqdn:
//           - *
//       match:
//         source:
//           labels:
//             role: ingress # Restrict this rule to instances with this label only
//       route:
//       - destination:
//           name: homepage
//
message Gateway {
  // REQUIRED: Details about the port on which the proxy listens and applies rules
  repeated Server servers = 1;

  // Optional names of certificates for the server and the CA bundle to be used to validate
  // the client's certificate (if mTLS is to be used).
  repeated TLSConfig certs = 2;
}

// Server describes the properties of the proxy on a given load balancer port.
// For example,
//     metadata:
//       name: my-ingress
//     spec:
//       servers:
//       - port: 80
//         protocol: HTTP #includes HTTP2|GRPC
//
// Another example
//     metadata:
//       name: my-tcp-ingress
//     spec:
//       servers:
//       - port: 2379
//         protocol: Redis
//         tcpBackend:
//           name: redis
//           port: 2379
//
message Server {
  // REQUIRED: The Port on which Envoy should listen for incoming
  // connections
  int32 port = 1;

  // REQUIRED: The protocol associated with this port. The protocol should
  // be one of HTTP|HTTP2|GRPC|MONGO|REDIS|TCP.
  string protocol = 2;

  // REQUIRED: A list of authorities exposed by this load balancer. While
  // typically applicable to HTTP services, it can also be used for TCP
  // services using TLS with SNI.  Wildcards are allowed in the authority
  // values. A special wildcard value of "*" stands for the default host.
  repeated string authorities = 4;

  message TLSOptions {
    // If set to true, the load balancer will send a 302 redirect for all
    // http connections, asking the clients to use HTTPS.
    bool https_redirect = 1;

    // TLS modes enforced by Envoy
    enum TLSmode {
      // If set to "passthrough", Envoy will forward the connection to the
      // upstream server as is.
      PASSTHROUGH = 0;

      // If set to "simple", Envoy will secure connections with
      // standard TLS semantics (server certs only).
      SIMPLE = 1;

      // If set to "mutual", Envoy will validate client's identity using
      // mTLS authentication.
      MUTUAL = 2;
    };

    // Optional: Indicates whether connections to this port should be
    // secured using TLS.  The value of this field determines how TLS is
    // enforced.  
    TLSmode mode = 2;
  }

  // Set of TLS related options that govern the server's behavior. Use
  // these options to control if all http requests should be redirected to
  // https, and the TLS modes to use.
  TLSOptions tls = 2;

  // Forward TCP connections on the ingress port to a specific service
  // within the mesh. ONLY ONE OF rules or tcp_backend is allowed.
  TCPBackend tcp_backend = 5;
}

// TCPBackend describes a service with a port that is the recipient of TCP
// connections arriving at the ingress load balancer. TCPBackends are
// typically used in the context of TCP services such as Mongo/Redis/plain
// TCP connections.
message TCPBackend {
  oneof target {
    // Name of the service for which connections are being proxied.
    string hostname = 1;
    // IP address of the service being proxied.
    string address = 2;
  }

  // REQUIRED: Port number or name to which the connections should be
  // forwarded to. The protocol used for this port will be automatically
  // derived from the protocol used by the associated Server that received
  // the connection from a client.
  string port = 3;
}

// TLSConfig describes the server-side TLS certificate and CA cert (for
// client authentication) for a particular host exposed by the ingress load
// balancer. These hosts are not resolved in any way. Its upto the end user
// to ensure that the DNS resolves these hosts to the ingress load balancer
//
// For example, the following is an example of TLS configuration for port 443
//     metadata:
//       name: my-ingress
//       namespace: mynamespace
//     spec:
//       servers:
//       - port: 443
//         protocol: HTTP
//         tls:
//           mode: simple
//       certs:
//       - authorities:
//           - foo.bar.com
//         serverCertificatet: server.crt
//         clientCABundle: client.ca-bundle
//       - authorities:
//           - example.com
//         serverCertificate: server.crt
//
message TLSConfig {
  // REQUIRED: A set of hostnames associated with the server
  // certificate. For wildcard hostname, use *
  repeated string authorities = 1;

  // REQUIRED: The name of the file holding the server-side TLS certificate
  // to use.  It is the responsibility of the underlying platform to mount
  // the certificate as a file under /etc/istio/ingress-certs with the same
  // name as the specified in this field.
  string server_certificate = 2;

  // To use mutual TLS for external clients, specify the name of the file
  // holding the CA certificate to validate the client's certificate. It is
  // the responsibility of the underlying platform to mount the certificate
  // as a file under /etc/istio/ingress-certs with the same name as
  // specified in this field.
  string client_ca_bundle = 3;
}
